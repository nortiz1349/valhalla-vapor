// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matrix.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_matrix_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_matrix_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_matrix_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_matrix_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class Matrix;
struct MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {
enum Matrix_Algorithm : int {
  Matrix_Algorithm_TimeDistanceMatrix = 0,
  Matrix_Algorithm_CostMatrix = 1,
  Matrix_Algorithm_TimeDistanceBSSMatrix = 2,
  Matrix_Algorithm_Matrix_Algorithm_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Matrix_Algorithm_Matrix_Algorithm_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Matrix_Algorithm_IsValid(int value);
extern const uint32_t Matrix_Algorithm_internal_data_[];
constexpr Matrix_Algorithm Matrix_Algorithm_Algorithm_MIN = static_cast<Matrix_Algorithm>(0);
constexpr Matrix_Algorithm Matrix_Algorithm_Algorithm_MAX = static_cast<Matrix_Algorithm>(2);
constexpr int Matrix_Algorithm_Algorithm_ARRAYSIZE = 2 + 1;
const std::string& Matrix_Algorithm_Name(Matrix_Algorithm value);
template <typename T>
const std::string& Matrix_Algorithm_Name(T value) {
  static_assert(std::is_same<T, Matrix_Algorithm>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Algorithm_Name().");
  return Matrix_Algorithm_Name(static_cast<Matrix_Algorithm>(value));
}
const std::string& Matrix_Algorithm_Name(Matrix_Algorithm value);
bool Matrix_Algorithm_Parse(absl::string_view name, Matrix_Algorithm* value);

// ===================================================================


// -------------------------------------------------------------------

class Matrix final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Matrix) */ {
 public:
  inline Matrix() : Matrix(nullptr) {}
  ~Matrix() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Matrix(::google::protobuf::internal::ConstantInitialized);

  inline Matrix(const Matrix& from)
      : Matrix(nullptr, from) {}
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Matrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Matrix* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Matrix";
  }
  protected:
  explicit Matrix(::google::protobuf::Arena* arena);
  Matrix(::google::protobuf::Arena* arena, const Matrix& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Algorithm = Matrix_Algorithm;
  static constexpr Algorithm TimeDistanceMatrix = Matrix_Algorithm_TimeDistanceMatrix;
  static constexpr Algorithm CostMatrix = Matrix_Algorithm_CostMatrix;
  static constexpr Algorithm TimeDistanceBSSMatrix = Matrix_Algorithm_TimeDistanceBSSMatrix;
  static inline bool Algorithm_IsValid(int value) {
    return Matrix_Algorithm_IsValid(value);
  }
  static constexpr Algorithm Algorithm_MIN = Matrix_Algorithm_Algorithm_MIN;
  static constexpr Algorithm Algorithm_MAX = Matrix_Algorithm_Algorithm_MAX;
  static constexpr int Algorithm_ARRAYSIZE = Matrix_Algorithm_Algorithm_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Algorithm_Name(T value) {
    return Matrix_Algorithm_Name(value);
  }
  static inline bool Algorithm_Parse(absl::string_view name, Algorithm* value) {
    return Matrix_Algorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDistancesFieldNumber = 2,
    kTimesFieldNumber = 3,
    kFromIndicesFieldNumber = 4,
    kToIndicesFieldNumber = 5,
    kDateTimesFieldNumber = 6,
    kShapesFieldNumber = 8,
    kTimeZoneOffsetsFieldNumber = 9,
    kTimeZoneNamesFieldNumber = 10,
    kSecondPassFieldNumber = 11,
    kAlgorithmFieldNumber = 7,
  };
  // repeated uint32 distances = 2;
  int distances_size() const;
  private:
  int _internal_distances_size() const;

  public:
  void clear_distances() ;
  ::uint32_t distances(int index) const;
  void set_distances(int index, ::uint32_t value);
  void add_distances(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& distances() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_distances();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_distances() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_distances();

  public:
  // repeated float times = 3;
  int times_size() const;
  private:
  int _internal_times_size() const;

  public:
  void clear_times() ;
  float times(int index) const;
  void set_times(int index, float value);
  void add_times(float value);
  const ::google::protobuf::RepeatedField<float>& times() const;
  ::google::protobuf::RepeatedField<float>* mutable_times();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_times() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_times();

  public:
  // repeated uint32 from_indices = 4;
  int from_indices_size() const;
  private:
  int _internal_from_indices_size() const;

  public:
  void clear_from_indices() ;
  ::uint32_t from_indices(int index) const;
  void set_from_indices(int index, ::uint32_t value);
  void add_from_indices(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& from_indices() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_from_indices();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_from_indices() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_from_indices();

  public:
  // repeated uint32 to_indices = 5;
  int to_indices_size() const;
  private:
  int _internal_to_indices_size() const;

  public:
  void clear_to_indices() ;
  ::uint32_t to_indices(int index) const;
  void set_to_indices(int index, ::uint32_t value);
  void add_to_indices(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& to_indices() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_to_indices();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_to_indices() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_to_indices();

  public:
  // repeated string date_times = 6;
  int date_times_size() const;
  private:
  int _internal_date_times_size() const;

  public:
  void clear_date_times() ;
  const std::string& date_times(int index) const;
  std::string* mutable_date_times(int index);
  void set_date_times(int index, const std::string& value);
  void set_date_times(int index, std::string&& value);
  void set_date_times(int index, const char* value);
  void set_date_times(int index, const char* value, std::size_t size);
  void set_date_times(int index, absl::string_view value);
  std::string* add_date_times();
  void add_date_times(const std::string& value);
  void add_date_times(std::string&& value);
  void add_date_times(const char* value);
  void add_date_times(const char* value, std::size_t size);
  void add_date_times(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& date_times() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_date_times();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_date_times() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_date_times();

  public:
  // repeated string shapes = 8;
  int shapes_size() const;
  private:
  int _internal_shapes_size() const;

  public:
  void clear_shapes() ;
  const std::string& shapes(int index) const;
  std::string* mutable_shapes(int index);
  void set_shapes(int index, const std::string& value);
  void set_shapes(int index, std::string&& value);
  void set_shapes(int index, const char* value);
  void set_shapes(int index, const char* value, std::size_t size);
  void set_shapes(int index, absl::string_view value);
  std::string* add_shapes();
  void add_shapes(const std::string& value);
  void add_shapes(std::string&& value);
  void add_shapes(const char* value);
  void add_shapes(const char* value, std::size_t size);
  void add_shapes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& shapes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_shapes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_shapes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_shapes();

  public:
  // repeated string time_zone_offsets = 9;
  int time_zone_offsets_size() const;
  private:
  int _internal_time_zone_offsets_size() const;

  public:
  void clear_time_zone_offsets() ;
  const std::string& time_zone_offsets(int index) const;
  std::string* mutable_time_zone_offsets(int index);
  void set_time_zone_offsets(int index, const std::string& value);
  void set_time_zone_offsets(int index, std::string&& value);
  void set_time_zone_offsets(int index, const char* value);
  void set_time_zone_offsets(int index, const char* value, std::size_t size);
  void set_time_zone_offsets(int index, absl::string_view value);
  std::string* add_time_zone_offsets();
  void add_time_zone_offsets(const std::string& value);
  void add_time_zone_offsets(std::string&& value);
  void add_time_zone_offsets(const char* value);
  void add_time_zone_offsets(const char* value, std::size_t size);
  void add_time_zone_offsets(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& time_zone_offsets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_time_zone_offsets();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_time_zone_offsets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_time_zone_offsets();

  public:
  // repeated string time_zone_names = 10;
  int time_zone_names_size() const;
  private:
  int _internal_time_zone_names_size() const;

  public:
  void clear_time_zone_names() ;
  const std::string& time_zone_names(int index) const;
  std::string* mutable_time_zone_names(int index);
  void set_time_zone_names(int index, const std::string& value);
  void set_time_zone_names(int index, std::string&& value);
  void set_time_zone_names(int index, const char* value);
  void set_time_zone_names(int index, const char* value, std::size_t size);
  void set_time_zone_names(int index, absl::string_view value);
  std::string* add_time_zone_names();
  void add_time_zone_names(const std::string& value);
  void add_time_zone_names(std::string&& value);
  void add_time_zone_names(const char* value);
  void add_time_zone_names(const char* value, std::size_t size);
  void add_time_zone_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& time_zone_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_time_zone_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_time_zone_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_time_zone_names();

  public:
  // repeated bool second_pass = 11;
  int second_pass_size() const;
  private:
  int _internal_second_pass_size() const;

  public:
  void clear_second_pass() ;
  bool second_pass(int index) const;
  void set_second_pass(int index, bool value);
  void add_second_pass(bool value);
  const ::google::protobuf::RepeatedField<bool>& second_pass() const;
  ::google::protobuf::RepeatedField<bool>* mutable_second_pass();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_second_pass() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_second_pass();

  public:
  // .valhalla.Matrix.Algorithm algorithm = 7;
  void clear_algorithm() ;
  ::valhalla::Matrix_Algorithm algorithm() const;
  void set_algorithm(::valhalla::Matrix_Algorithm value);

  private:
  ::valhalla::Matrix_Algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::valhalla::Matrix_Algorithm value);

  public:
  // @@protoc_insertion_point(class_scope:valhalla.Matrix)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      80, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::uint32_t> distances_;
    mutable ::google::protobuf::internal::CachedSize _distances_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> times_;
    ::google::protobuf::RepeatedField<::uint32_t> from_indices_;
    mutable ::google::protobuf::internal::CachedSize _from_indices_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> to_indices_;
    mutable ::google::protobuf::internal::CachedSize _to_indices_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> date_times_;
    ::google::protobuf::RepeatedPtrField<std::string> shapes_;
    ::google::protobuf::RepeatedPtrField<std::string> time_zone_offsets_;
    ::google::protobuf::RepeatedPtrField<std::string> time_zone_names_;
    ::google::protobuf::RepeatedField<bool> second_pass_;
    int algorithm_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_matrix_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Matrix

// repeated uint32 distances = 2;
inline int Matrix::_internal_distances_size() const {
  return _internal_distances().size();
}
inline int Matrix::distances_size() const {
  return _internal_distances_size();
}
inline void Matrix::clear_distances() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.distances_.Clear();
}
inline ::uint32_t Matrix::distances(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.distances)
  return _internal_distances().Get(index);
}
inline void Matrix::set_distances(int index, ::uint32_t value) {
  _internal_mutable_distances()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.distances)
}
inline void Matrix::add_distances(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_distances()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.distances)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Matrix::distances() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.distances)
  return _internal_distances();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Matrix::mutable_distances()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.distances)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_distances();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Matrix::_internal_distances()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.distances_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Matrix::_internal_mutable_distances() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.distances_;
}

// repeated float times = 3;
inline int Matrix::_internal_times_size() const {
  return _internal_times().size();
}
inline int Matrix::times_size() const {
  return _internal_times_size();
}
inline void Matrix::clear_times() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.times_.Clear();
}
inline float Matrix::times(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.times)
  return _internal_times().Get(index);
}
inline void Matrix::set_times(int index, float value) {
  _internal_mutable_times()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.times)
}
inline void Matrix::add_times(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_times()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.times)
}
inline const ::google::protobuf::RepeatedField<float>& Matrix::times() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.times)
  return _internal_times();
}
inline ::google::protobuf::RepeatedField<float>* Matrix::mutable_times()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.times)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_times();
}
inline const ::google::protobuf::RepeatedField<float>& Matrix::_internal_times()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.times_;
}
inline ::google::protobuf::RepeatedField<float>* Matrix::_internal_mutable_times() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.times_;
}

// repeated uint32 from_indices = 4;
inline int Matrix::_internal_from_indices_size() const {
  return _internal_from_indices().size();
}
inline int Matrix::from_indices_size() const {
  return _internal_from_indices_size();
}
inline void Matrix::clear_from_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.from_indices_.Clear();
}
inline ::uint32_t Matrix::from_indices(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.from_indices)
  return _internal_from_indices().Get(index);
}
inline void Matrix::set_from_indices(int index, ::uint32_t value) {
  _internal_mutable_from_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.from_indices)
}
inline void Matrix::add_from_indices(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_from_indices()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.from_indices)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Matrix::from_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.from_indices)
  return _internal_from_indices();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Matrix::mutable_from_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.from_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_from_indices();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Matrix::_internal_from_indices()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.from_indices_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Matrix::_internal_mutable_from_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.from_indices_;
}

// repeated uint32 to_indices = 5;
inline int Matrix::_internal_to_indices_size() const {
  return _internal_to_indices().size();
}
inline int Matrix::to_indices_size() const {
  return _internal_to_indices_size();
}
inline void Matrix::clear_to_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.to_indices_.Clear();
}
inline ::uint32_t Matrix::to_indices(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.to_indices)
  return _internal_to_indices().Get(index);
}
inline void Matrix::set_to_indices(int index, ::uint32_t value) {
  _internal_mutable_to_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.to_indices)
}
inline void Matrix::add_to_indices(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to_indices()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.to_indices)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Matrix::to_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.to_indices)
  return _internal_to_indices();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Matrix::mutable_to_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.to_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_to_indices();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Matrix::_internal_to_indices()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_indices_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Matrix::_internal_mutable_to_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.to_indices_;
}

// repeated string date_times = 6;
inline int Matrix::_internal_date_times_size() const {
  return _internal_date_times().size();
}
inline int Matrix::date_times_size() const {
  return _internal_date_times_size();
}
inline void Matrix::clear_date_times() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_times_.Clear();
}
inline std::string* Matrix::add_date_times()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_date_times()->Add();
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.date_times)
  return _s;
}
inline const std::string& Matrix::date_times(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.date_times)
  return _internal_date_times().Get(index);
}
inline std::string* Matrix::mutable_date_times(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.date_times)
  return _internal_mutable_date_times()->Mutable(index);
}
inline void Matrix::set_date_times(int index, const std::string& value) {
  _internal_mutable_date_times()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.date_times)
}
inline void Matrix::set_date_times(int index, std::string&& value) {
  _internal_mutable_date_times()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.Matrix.date_times)
}
inline void Matrix::set_date_times(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_date_times()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.date_times)
}
inline void Matrix::set_date_times(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_date_times()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.date_times)
}
inline void Matrix::set_date_times(int index, absl::string_view value) {
  _internal_mutable_date_times()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date_times()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date_times()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date_times()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date_times()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_date_times()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:valhalla.Matrix.date_times)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::date_times() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.date_times)
  return _internal_date_times();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::mutable_date_times() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.date_times)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_date_times();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::_internal_date_times() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.date_times_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::_internal_mutable_date_times() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.date_times_;
}

// .valhalla.Matrix.Algorithm algorithm = 7;
inline void Matrix::clear_algorithm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.algorithm_ = 0;
}
inline ::valhalla::Matrix_Algorithm Matrix::algorithm() const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.algorithm)
  return _internal_algorithm();
}
inline void Matrix::set_algorithm(::valhalla::Matrix_Algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.algorithm)
}
inline ::valhalla::Matrix_Algorithm Matrix::_internal_algorithm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::valhalla::Matrix_Algorithm>(_impl_.algorithm_);
}
inline void Matrix::_internal_set_algorithm(::valhalla::Matrix_Algorithm value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.algorithm_ = value;
}

// repeated string shapes = 8;
inline int Matrix::_internal_shapes_size() const {
  return _internal_shapes().size();
}
inline int Matrix::shapes_size() const {
  return _internal_shapes_size();
}
inline void Matrix::clear_shapes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shapes_.Clear();
}
inline std::string* Matrix::add_shapes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_shapes()->Add();
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.shapes)
  return _s;
}
inline const std::string& Matrix::shapes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.shapes)
  return _internal_shapes().Get(index);
}
inline std::string* Matrix::mutable_shapes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.shapes)
  return _internal_mutable_shapes()->Mutable(index);
}
inline void Matrix::set_shapes(int index, const std::string& value) {
  _internal_mutable_shapes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.shapes)
}
inline void Matrix::set_shapes(int index, std::string&& value) {
  _internal_mutable_shapes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.Matrix.shapes)
}
inline void Matrix::set_shapes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_shapes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.shapes)
}
inline void Matrix::set_shapes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_shapes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.shapes)
}
inline void Matrix::set_shapes(int index, absl::string_view value) {
  _internal_mutable_shapes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_shapes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_shapes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_shapes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_shapes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_shapes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:valhalla.Matrix.shapes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::shapes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.shapes)
  return _internal_shapes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::mutable_shapes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.shapes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_shapes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::_internal_shapes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shapes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::_internal_mutable_shapes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.shapes_;
}

// repeated string time_zone_offsets = 9;
inline int Matrix::_internal_time_zone_offsets_size() const {
  return _internal_time_zone_offsets().size();
}
inline int Matrix::time_zone_offsets_size() const {
  return _internal_time_zone_offsets_size();
}
inline void Matrix::clear_time_zone_offsets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_zone_offsets_.Clear();
}
inline std::string* Matrix::add_time_zone_offsets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_time_zone_offsets()->Add();
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.time_zone_offsets)
  return _s;
}
inline const std::string& Matrix::time_zone_offsets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.time_zone_offsets)
  return _internal_time_zone_offsets().Get(index);
}
inline std::string* Matrix::mutable_time_zone_offsets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.time_zone_offsets)
  return _internal_mutable_time_zone_offsets()->Mutable(index);
}
inline void Matrix::set_time_zone_offsets(int index, const std::string& value) {
  _internal_mutable_time_zone_offsets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::set_time_zone_offsets(int index, std::string&& value) {
  _internal_mutable_time_zone_offsets()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::set_time_zone_offsets(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_time_zone_offsets()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::set_time_zone_offsets(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_time_zone_offsets()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::set_time_zone_offsets(int index, absl::string_view value) {
  _internal_mutable_time_zone_offsets()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_offsets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_offsets()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_offsets()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_offsets()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_offsets()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:valhalla.Matrix.time_zone_offsets)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::time_zone_offsets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.time_zone_offsets)
  return _internal_time_zone_offsets();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::mutable_time_zone_offsets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.time_zone_offsets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_time_zone_offsets();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::_internal_time_zone_offsets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_zone_offsets_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::_internal_mutable_time_zone_offsets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.time_zone_offsets_;
}

// repeated string time_zone_names = 10;
inline int Matrix::_internal_time_zone_names_size() const {
  return _internal_time_zone_names().size();
}
inline int Matrix::time_zone_names_size() const {
  return _internal_time_zone_names_size();
}
inline void Matrix::clear_time_zone_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_zone_names_.Clear();
}
inline std::string* Matrix::add_time_zone_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_time_zone_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.time_zone_names)
  return _s;
}
inline const std::string& Matrix::time_zone_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.time_zone_names)
  return _internal_time_zone_names().Get(index);
}
inline std::string* Matrix::mutable_time_zone_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.time_zone_names)
  return _internal_mutable_time_zone_names()->Mutable(index);
}
inline void Matrix::set_time_zone_names(int index, const std::string& value) {
  _internal_mutable_time_zone_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_names)
}
inline void Matrix::set_time_zone_names(int index, std::string&& value) {
  _internal_mutable_time_zone_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_names)
}
inline void Matrix::set_time_zone_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_time_zone_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.time_zone_names)
}
inline void Matrix::set_time_zone_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_time_zone_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.time_zone_names)
}
inline void Matrix::set_time_zone_names(int index, absl::string_view value) {
  _internal_mutable_time_zone_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_time_zone_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:valhalla.Matrix.time_zone_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::time_zone_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.time_zone_names)
  return _internal_time_zone_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::mutable_time_zone_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.time_zone_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_time_zone_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Matrix::_internal_time_zone_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_zone_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Matrix::_internal_mutable_time_zone_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.time_zone_names_;
}

// repeated bool second_pass = 11;
inline int Matrix::_internal_second_pass_size() const {
  return _internal_second_pass().size();
}
inline int Matrix::second_pass_size() const {
  return _internal_second_pass_size();
}
inline void Matrix::clear_second_pass() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.second_pass_.Clear();
}
inline bool Matrix::second_pass(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.second_pass)
  return _internal_second_pass().Get(index);
}
inline void Matrix::set_second_pass(int index, bool value) {
  _internal_mutable_second_pass()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.second_pass)
}
inline void Matrix::add_second_pass(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_second_pass()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.second_pass)
}
inline const ::google::protobuf::RepeatedField<bool>& Matrix::second_pass() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.second_pass)
  return _internal_second_pass();
}
inline ::google::protobuf::RepeatedField<bool>* Matrix::mutable_second_pass()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.second_pass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_second_pass();
}
inline const ::google::protobuf::RepeatedField<bool>& Matrix::_internal_second_pass()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.second_pass_;
}
inline ::google::protobuf::RepeatedField<bool>* Matrix::_internal_mutable_second_pass() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.second_pass_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::valhalla::Matrix_Algorithm> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_matrix_2eproto_2epb_2eh
