// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sign_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sign_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sign_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sign_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class TripSign;
struct TripSignDefaultTypeInternal;
extern TripSignDefaultTypeInternal _TripSign_default_instance_;
class TripSignElement;
struct TripSignElementDefaultTypeInternal;
extern TripSignElementDefaultTypeInternal _TripSignElement_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {

// ===================================================================


// -------------------------------------------------------------------

class TripSignElement final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSignElement) */ {
 public:
  inline TripSignElement() : TripSignElement(nullptr) {}
  ~TripSignElement() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TripSignElement(::google::protobuf::internal::ConstantInitialized);

  inline TripSignElement(const TripSignElement& from)
      : TripSignElement(nullptr, from) {}
  TripSignElement(TripSignElement&& from) noexcept
    : TripSignElement() {
    *this = ::std::move(from);
  }

  inline TripSignElement& operator=(const TripSignElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripSignElement& operator=(TripSignElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TripSignElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripSignElement* internal_default_instance() {
    return reinterpret_cast<const TripSignElement*>(
               &_TripSignElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TripSignElement& a, TripSignElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TripSignElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripSignElement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripSignElement* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripSignElement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TripSignElement& from);
  void MergeFrom(const TripSignElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TripSignElement* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.TripSignElement";
  }
  protected:
  explicit TripSignElement(::google::protobuf::Arena* arena);
  TripSignElement(::google::protobuf::Arena* arena, const TripSignElement& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kPronunciationFieldNumber = 4,
    kIsRouteNumberFieldNumber = 2,
    kConsecutiveCountFieldNumber = 3,
    kLanguageTagFieldNumber = 5,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .valhalla.Pronunciation pronunciation = 4;
  bool has_pronunciation() const;
  void clear_pronunciation() ;
  const ::valhalla::Pronunciation& pronunciation() const;
  PROTOBUF_NODISCARD ::valhalla::Pronunciation* release_pronunciation();
  ::valhalla::Pronunciation* mutable_pronunciation();
  void set_allocated_pronunciation(::valhalla::Pronunciation* value);
  void unsafe_arena_set_allocated_pronunciation(::valhalla::Pronunciation* value);
  ::valhalla::Pronunciation* unsafe_arena_release_pronunciation();

  private:
  const ::valhalla::Pronunciation& _internal_pronunciation() const;
  ::valhalla::Pronunciation* _internal_mutable_pronunciation();

  public:
  // bool is_route_number = 2;
  void clear_is_route_number() ;
  bool is_route_number() const;
  void set_is_route_number(bool value);

  private:
  bool _internal_is_route_number() const;
  void _internal_set_is_route_number(bool value);

  public:
  // uint32 consecutive_count = 3;
  void clear_consecutive_count() ;
  ::uint32_t consecutive_count() const;
  void set_consecutive_count(::uint32_t value);

  private:
  ::uint32_t _internal_consecutive_count() const;
  void _internal_set_consecutive_count(::uint32_t value);

  public:
  // .valhalla.LanguageTag language_tag = 5;
  void clear_language_tag() ;
  ::valhalla::LanguageTag language_tag() const;
  void set_language_tag(::valhalla::LanguageTag value);

  private:
  ::valhalla::LanguageTag _internal_language_tag() const;
  void _internal_set_language_tag(::valhalla::LanguageTag value);

  public:
  // @@protoc_insertion_point(class_scope:valhalla.TripSignElement)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::valhalla::Pronunciation* pronunciation_;
    bool is_route_number_;
    ::uint32_t consecutive_count_;
    int language_tag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sign_2eproto;
};// -------------------------------------------------------------------

class TripSign final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSign) */ {
 public:
  inline TripSign() : TripSign(nullptr) {}
  ~TripSign() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TripSign(::google::protobuf::internal::ConstantInitialized);

  inline TripSign(const TripSign& from)
      : TripSign(nullptr, from) {}
  TripSign(TripSign&& from) noexcept
    : TripSign() {
    *this = ::std::move(from);
  }

  inline TripSign& operator=(const TripSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripSign& operator=(TripSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TripSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripSign* internal_default_instance() {
    return reinterpret_cast<const TripSign*>(
               &_TripSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TripSign& a, TripSign& b) {
    a.Swap(&b);
  }
  inline void Swap(TripSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripSign* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripSign* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripSign>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const TripSign& from);
  void MergeFrom(const TripSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TripSign* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.TripSign";
  }
  protected:
  explicit TripSign(::google::protobuf::Arena* arena);
  TripSign(::google::protobuf::Arena* arena, const TripSign& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExitNumbersFieldNumber = 1,
    kExitOntoStreetsFieldNumber = 2,
    kExitTowardLocationsFieldNumber = 3,
    kExitNamesFieldNumber = 4,
    kGuideOntoStreetsFieldNumber = 5,
    kGuideTowardLocationsFieldNumber = 6,
    kJunctionNamesFieldNumber = 7,
    kGuidanceViewJunctionsFieldNumber = 8,
    kGuidanceViewSignboardsFieldNumber = 9,
  };
  // repeated .valhalla.TripSignElement exit_numbers = 1;
  int exit_numbers_size() const;
  private:
  int _internal_exit_numbers_size() const;

  public:
  void clear_exit_numbers() ;
  ::valhalla::TripSignElement* mutable_exit_numbers(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_numbers();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_exit_numbers() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_exit_numbers();
  public:
  const ::valhalla::TripSignElement& exit_numbers(int index) const;
  ::valhalla::TripSignElement* add_exit_numbers();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_numbers() const;
  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  int exit_onto_streets_size() const;
  private:
  int _internal_exit_onto_streets_size() const;

  public:
  void clear_exit_onto_streets() ;
  ::valhalla::TripSignElement* mutable_exit_onto_streets(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_onto_streets();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_exit_onto_streets() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_exit_onto_streets();
  public:
  const ::valhalla::TripSignElement& exit_onto_streets(int index) const;
  ::valhalla::TripSignElement* add_exit_onto_streets();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_onto_streets() const;
  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  int exit_toward_locations_size() const;
  private:
  int _internal_exit_toward_locations_size() const;

  public:
  void clear_exit_toward_locations() ;
  ::valhalla::TripSignElement* mutable_exit_toward_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_toward_locations();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_exit_toward_locations() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_exit_toward_locations();
  public:
  const ::valhalla::TripSignElement& exit_toward_locations(int index) const;
  ::valhalla::TripSignElement* add_exit_toward_locations();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_toward_locations() const;
  // repeated .valhalla.TripSignElement exit_names = 4;
  int exit_names_size() const;
  private:
  int _internal_exit_names_size() const;

  public:
  void clear_exit_names() ;
  ::valhalla::TripSignElement* mutable_exit_names(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_names();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_exit_names() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_exit_names();
  public:
  const ::valhalla::TripSignElement& exit_names(int index) const;
  ::valhalla::TripSignElement* add_exit_names();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_names() const;
  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  int guide_onto_streets_size() const;
  private:
  int _internal_guide_onto_streets_size() const;

  public:
  void clear_guide_onto_streets() ;
  ::valhalla::TripSignElement* mutable_guide_onto_streets(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_onto_streets();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_guide_onto_streets() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_guide_onto_streets();
  public:
  const ::valhalla::TripSignElement& guide_onto_streets(int index) const;
  ::valhalla::TripSignElement* add_guide_onto_streets();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_onto_streets() const;
  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  int guide_toward_locations_size() const;
  private:
  int _internal_guide_toward_locations_size() const;

  public:
  void clear_guide_toward_locations() ;
  ::valhalla::TripSignElement* mutable_guide_toward_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_toward_locations();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_guide_toward_locations() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_guide_toward_locations();
  public:
  const ::valhalla::TripSignElement& guide_toward_locations(int index) const;
  ::valhalla::TripSignElement* add_guide_toward_locations();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_toward_locations() const;
  // repeated .valhalla.TripSignElement junction_names = 7;
  int junction_names_size() const;
  private:
  int _internal_junction_names_size() const;

  public:
  void clear_junction_names() ;
  ::valhalla::TripSignElement* mutable_junction_names(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_junction_names();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_junction_names() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_junction_names();
  public:
  const ::valhalla::TripSignElement& junction_names(int index) const;
  ::valhalla::TripSignElement* add_junction_names();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      junction_names() const;
  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  int guidance_view_junctions_size() const;
  private:
  int _internal_guidance_view_junctions_size() const;

  public:
  void clear_guidance_view_junctions() ;
  ::valhalla::TripSignElement* mutable_guidance_view_junctions(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_junctions();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_guidance_view_junctions() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_guidance_view_junctions();
  public:
  const ::valhalla::TripSignElement& guidance_view_junctions(int index) const;
  ::valhalla::TripSignElement* add_guidance_view_junctions();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_junctions() const;
  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  int guidance_view_signboards_size() const;
  private:
  int _internal_guidance_view_signboards_size() const;

  public:
  void clear_guidance_view_signboards() ;
  ::valhalla::TripSignElement* mutable_guidance_view_signboards(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_signboards();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& _internal_guidance_view_signboards() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* _internal_mutable_guidance_view_signboards();
  public:
  const ::valhalla::TripSignElement& guidance_view_signboards(int index) const;
  ::valhalla::TripSignElement* add_guidance_view_signboards();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_signboards() const;
  // @@protoc_insertion_point(class_scope:valhalla.TripSign)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 9,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_numbers_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_onto_streets_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_toward_locations_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_names_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guide_onto_streets_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guide_toward_locations_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > junction_names_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_junctions_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_signboards_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sign_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TripSignElement

// string text = 1;
inline void TripSignElement::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TripSignElement::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TripSignElement::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
}
inline std::string* TripSignElement::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.text)
  return _s;
}
inline const std::string& TripSignElement::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void TripSignElement::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* TripSignElement::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* TripSignElement::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.text)
  return _impl_.text_.Release();
}
inline void TripSignElement::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.text)
}

// bool is_route_number = 2;
inline void TripSignElement::clear_is_route_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_route_number_ = false;
}
inline bool TripSignElement::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.is_route_number)
  return _internal_is_route_number();
}
inline void TripSignElement::set_is_route_number(bool value) {
  _internal_set_is_route_number(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.is_route_number)
}
inline bool TripSignElement::_internal_is_route_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_route_number_;
}
inline void TripSignElement::_internal_set_is_route_number(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_route_number_ = value;
}

// uint32 consecutive_count = 3;
inline void TripSignElement::clear_consecutive_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.consecutive_count_ = 0u;
}
inline ::uint32_t TripSignElement::consecutive_count() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.consecutive_count)
  return _internal_consecutive_count();
}
inline void TripSignElement::set_consecutive_count(::uint32_t value) {
  _internal_set_consecutive_count(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.consecutive_count)
}
inline ::uint32_t TripSignElement::_internal_consecutive_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.consecutive_count_;
}
inline void TripSignElement::_internal_set_consecutive_count(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consecutive_count_ = value;
}

// .valhalla.Pronunciation pronunciation = 4;
inline bool TripSignElement::has_pronunciation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pronunciation_ != nullptr);
  return value;
}
inline const ::valhalla::Pronunciation& TripSignElement::_internal_pronunciation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Pronunciation* p = _impl_.pronunciation_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Pronunciation&>(::valhalla::_Pronunciation_default_instance_);
}
inline const ::valhalla::Pronunciation& TripSignElement::pronunciation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.pronunciation)
  return _internal_pronunciation();
}
inline void TripSignElement::unsafe_arena_set_allocated_pronunciation(::valhalla::Pronunciation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pronunciation_);
  }
  _impl_.pronunciation_ = reinterpret_cast<::valhalla::Pronunciation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TripSignElement.pronunciation)
}
inline ::valhalla::Pronunciation* TripSignElement::release_pronunciation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::valhalla::Pronunciation* released = _impl_.pronunciation_;
  _impl_.pronunciation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Pronunciation* TripSignElement::unsafe_arena_release_pronunciation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.pronunciation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::valhalla::Pronunciation* temp = _impl_.pronunciation_;
  _impl_.pronunciation_ = nullptr;
  return temp;
}
inline ::valhalla::Pronunciation* TripSignElement::_internal_mutable_pronunciation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pronunciation_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Pronunciation>(GetArena());
    _impl_.pronunciation_ = reinterpret_cast<::valhalla::Pronunciation*>(p);
  }
  return _impl_.pronunciation_;
}
inline ::valhalla::Pronunciation* TripSignElement::mutable_pronunciation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Pronunciation* _msg = _internal_mutable_pronunciation();
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.pronunciation)
  return _msg;
}
inline void TripSignElement::set_allocated_pronunciation(::valhalla::Pronunciation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pronunciation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pronunciation_ = reinterpret_cast<::valhalla::Pronunciation*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.pronunciation)
}

// .valhalla.LanguageTag language_tag = 5;
inline void TripSignElement::clear_language_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_tag_ = 0;
}
inline ::valhalla::LanguageTag TripSignElement::language_tag() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.language_tag)
  return _internal_language_tag();
}
inline void TripSignElement::set_language_tag(::valhalla::LanguageTag value) {
  _internal_set_language_tag(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.language_tag)
}
inline ::valhalla::LanguageTag TripSignElement::_internal_language_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::valhalla::LanguageTag>(_impl_.language_tag_);
}
inline void TripSignElement::_internal_set_language_tag(::valhalla::LanguageTag value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_tag_ = value;
}

// -------------------------------------------------------------------

// TripSign

// repeated .valhalla.TripSignElement exit_numbers = 1;
inline int TripSign::_internal_exit_numbers_size() const {
  return _internal_exit_numbers().size();
}
inline int TripSign::exit_numbers_size() const {
  return _internal_exit_numbers_size();
}
inline void TripSign::clear_exit_numbers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exit_numbers_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_numbers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_numbers)
  return _internal_mutable_exit_numbers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_exit_numbers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_numbers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exit_numbers();
}
inline const ::valhalla::TripSignElement& TripSign::exit_numbers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_numbers)
  return _internal_exit_numbers().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_numbers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_exit_numbers()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_numbers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::exit_numbers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_numbers)
  return _internal_exit_numbers();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_exit_numbers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exit_numbers_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_exit_numbers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exit_numbers_;
}

// repeated .valhalla.TripSignElement exit_onto_streets = 2;
inline int TripSign::_internal_exit_onto_streets_size() const {
  return _internal_exit_onto_streets().size();
}
inline int TripSign::exit_onto_streets_size() const {
  return _internal_exit_onto_streets_size();
}
inline void TripSign::clear_exit_onto_streets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exit_onto_streets_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_onto_streets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_onto_streets)
  return _internal_mutable_exit_onto_streets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_exit_onto_streets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_onto_streets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exit_onto_streets();
}
inline const ::valhalla::TripSignElement& TripSign::exit_onto_streets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_onto_streets)
  return _internal_exit_onto_streets().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_onto_streets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_exit_onto_streets()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_onto_streets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::exit_onto_streets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_onto_streets)
  return _internal_exit_onto_streets();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_exit_onto_streets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exit_onto_streets_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_exit_onto_streets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exit_onto_streets_;
}

// repeated .valhalla.TripSignElement exit_toward_locations = 3;
inline int TripSign::_internal_exit_toward_locations_size() const {
  return _internal_exit_toward_locations().size();
}
inline int TripSign::exit_toward_locations_size() const {
  return _internal_exit_toward_locations_size();
}
inline void TripSign::clear_exit_toward_locations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exit_toward_locations_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_toward_locations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_toward_locations)
  return _internal_mutable_exit_toward_locations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_exit_toward_locations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_toward_locations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exit_toward_locations();
}
inline const ::valhalla::TripSignElement& TripSign::exit_toward_locations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_toward_locations)
  return _internal_exit_toward_locations().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_toward_locations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_exit_toward_locations()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_toward_locations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::exit_toward_locations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_toward_locations)
  return _internal_exit_toward_locations();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_exit_toward_locations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exit_toward_locations_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_exit_toward_locations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exit_toward_locations_;
}

// repeated .valhalla.TripSignElement exit_names = 4;
inline int TripSign::_internal_exit_names_size() const {
  return _internal_exit_names().size();
}
inline int TripSign::exit_names_size() const {
  return _internal_exit_names_size();
}
inline void TripSign::clear_exit_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exit_names_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_names)
  return _internal_mutable_exit_names()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_exit_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exit_names();
}
inline const ::valhalla::TripSignElement& TripSign::exit_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_names)
  return _internal_exit_names().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_exit_names()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_names)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::exit_names() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_names)
  return _internal_exit_names();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_exit_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exit_names_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_exit_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exit_names_;
}

// repeated .valhalla.TripSignElement guide_onto_streets = 5;
inline int TripSign::_internal_guide_onto_streets_size() const {
  return _internal_guide_onto_streets().size();
}
inline int TripSign::guide_onto_streets_size() const {
  return _internal_guide_onto_streets_size();
}
inline void TripSign::clear_guide_onto_streets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guide_onto_streets_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_onto_streets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_onto_streets)
  return _internal_mutable_guide_onto_streets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_guide_onto_streets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_onto_streets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_guide_onto_streets();
}
inline const ::valhalla::TripSignElement& TripSign::guide_onto_streets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_onto_streets)
  return _internal_guide_onto_streets().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guide_onto_streets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_guide_onto_streets()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_onto_streets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::guide_onto_streets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_onto_streets)
  return _internal_guide_onto_streets();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_guide_onto_streets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guide_onto_streets_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_guide_onto_streets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.guide_onto_streets_;
}

// repeated .valhalla.TripSignElement guide_toward_locations = 6;
inline int TripSign::_internal_guide_toward_locations_size() const {
  return _internal_guide_toward_locations().size();
}
inline int TripSign::guide_toward_locations_size() const {
  return _internal_guide_toward_locations_size();
}
inline void TripSign::clear_guide_toward_locations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guide_toward_locations_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_toward_locations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_toward_locations)
  return _internal_mutable_guide_toward_locations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_guide_toward_locations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_toward_locations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_guide_toward_locations();
}
inline const ::valhalla::TripSignElement& TripSign::guide_toward_locations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_toward_locations)
  return _internal_guide_toward_locations().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guide_toward_locations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_guide_toward_locations()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_toward_locations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::guide_toward_locations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_toward_locations)
  return _internal_guide_toward_locations();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_guide_toward_locations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guide_toward_locations_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_guide_toward_locations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.guide_toward_locations_;
}

// repeated .valhalla.TripSignElement junction_names = 7;
inline int TripSign::_internal_junction_names_size() const {
  return _internal_junction_names().size();
}
inline int TripSign::junction_names_size() const {
  return _internal_junction_names_size();
}
inline void TripSign::clear_junction_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.junction_names_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_junction_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.junction_names)
  return _internal_mutable_junction_names()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_junction_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.junction_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_junction_names();
}
inline const ::valhalla::TripSignElement& TripSign::junction_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.junction_names)
  return _internal_junction_names().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_junction_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_junction_names()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.junction_names)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::junction_names() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.junction_names)
  return _internal_junction_names();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_junction_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.junction_names_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_junction_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.junction_names_;
}

// repeated .valhalla.TripSignElement guidance_view_junctions = 8;
inline int TripSign::_internal_guidance_view_junctions_size() const {
  return _internal_guidance_view_junctions().size();
}
inline int TripSign::guidance_view_junctions_size() const {
  return _internal_guidance_view_junctions_size();
}
inline void TripSign::clear_guidance_view_junctions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guidance_view_junctions_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_junctions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_junctions)
  return _internal_mutable_guidance_view_junctions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_guidance_view_junctions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_junctions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_guidance_view_junctions();
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_junctions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_junctions)
  return _internal_guidance_view_junctions().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_junctions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_guidance_view_junctions()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_junctions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::guidance_view_junctions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_junctions)
  return _internal_guidance_view_junctions();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_guidance_view_junctions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guidance_view_junctions_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_guidance_view_junctions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.guidance_view_junctions_;
}

// repeated .valhalla.TripSignElement guidance_view_signboards = 9;
inline int TripSign::_internal_guidance_view_signboards_size() const {
  return _internal_guidance_view_signboards().size();
}
inline int TripSign::guidance_view_signboards_size() const {
  return _internal_guidance_view_signboards_size();
}
inline void TripSign::clear_guidance_view_signboards() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guidance_view_signboards_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_signboards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_signboards)
  return _internal_mutable_guidance_view_signboards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>* TripSign::mutable_guidance_view_signboards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_signboards)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_guidance_view_signboards();
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_signboards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_signboards)
  return _internal_guidance_view_signboards().Get(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_signboards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::TripSignElement* _add = _internal_mutable_guidance_view_signboards()->Add();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_signboards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>& TripSign::guidance_view_signboards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_signboards)
  return _internal_guidance_view_signboards();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>&
TripSign::_internal_guidance_view_signboards() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guidance_view_signboards_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::TripSignElement>*
TripSign::_internal_mutable_guidance_view_signboards() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.guidance_view_signboards_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sign_2eproto_2epb_2eh
