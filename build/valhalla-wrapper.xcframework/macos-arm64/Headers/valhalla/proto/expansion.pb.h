// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expansion.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_expansion_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_expansion_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_expansion_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_expansion_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class Expansion;
struct ExpansionDefaultTypeInternal;
extern ExpansionDefaultTypeInternal _Expansion_default_instance_;
class Expansion_Geometry;
struct Expansion_GeometryDefaultTypeInternal;
extern Expansion_GeometryDefaultTypeInternal _Expansion_Geometry_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {
enum Expansion_EdgeStatus : int {
  Expansion_EdgeStatus_connected = 0,
  Expansion_EdgeStatus_settled = 1,
  Expansion_EdgeStatus_reached = 2,
  Expansion_EdgeStatus_Expansion_EdgeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Expansion_EdgeStatus_Expansion_EdgeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Expansion_EdgeStatus_IsValid(int value);
extern const uint32_t Expansion_EdgeStatus_internal_data_[];
constexpr Expansion_EdgeStatus Expansion_EdgeStatus_EdgeStatus_MIN = static_cast<Expansion_EdgeStatus>(0);
constexpr Expansion_EdgeStatus Expansion_EdgeStatus_EdgeStatus_MAX = static_cast<Expansion_EdgeStatus>(2);
constexpr int Expansion_EdgeStatus_EdgeStatus_ARRAYSIZE = 2 + 1;
const std::string& Expansion_EdgeStatus_Name(Expansion_EdgeStatus value);
template <typename T>
const std::string& Expansion_EdgeStatus_Name(T value) {
  static_assert(std::is_same<T, Expansion_EdgeStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EdgeStatus_Name().");
  return Expansion_EdgeStatus_Name(static_cast<Expansion_EdgeStatus>(value));
}
const std::string& Expansion_EdgeStatus_Name(Expansion_EdgeStatus value);
bool Expansion_EdgeStatus_Parse(absl::string_view name, Expansion_EdgeStatus* value);
enum Expansion_ExpansionType : int {
  Expansion_ExpansionType_forward = 0,
  Expansion_ExpansionType_reverse = 1,
  Expansion_ExpansionType_Expansion_ExpansionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Expansion_ExpansionType_Expansion_ExpansionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Expansion_ExpansionType_IsValid(int value);
extern const uint32_t Expansion_ExpansionType_internal_data_[];
constexpr Expansion_ExpansionType Expansion_ExpansionType_ExpansionType_MIN = static_cast<Expansion_ExpansionType>(0);
constexpr Expansion_ExpansionType Expansion_ExpansionType_ExpansionType_MAX = static_cast<Expansion_ExpansionType>(1);
constexpr int Expansion_ExpansionType_ExpansionType_ARRAYSIZE = 1 + 1;
const std::string& Expansion_ExpansionType_Name(Expansion_ExpansionType value);
template <typename T>
const std::string& Expansion_ExpansionType_Name(T value) {
  static_assert(std::is_same<T, Expansion_ExpansionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExpansionType_Name().");
  return Expansion_ExpansionType_Name(static_cast<Expansion_ExpansionType>(value));
}
const std::string& Expansion_ExpansionType_Name(Expansion_ExpansionType value);
bool Expansion_ExpansionType_Parse(absl::string_view name, Expansion_ExpansionType* value);

// ===================================================================


// -------------------------------------------------------------------

class Expansion_Geometry final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Expansion.Geometry) */ {
 public:
  inline Expansion_Geometry() : Expansion_Geometry(nullptr) {}
  ~Expansion_Geometry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Expansion_Geometry(::google::protobuf::internal::ConstantInitialized);

  inline Expansion_Geometry(const Expansion_Geometry& from)
      : Expansion_Geometry(nullptr, from) {}
  Expansion_Geometry(Expansion_Geometry&& from) noexcept
    : Expansion_Geometry() {
    *this = ::std::move(from);
  }

  inline Expansion_Geometry& operator=(const Expansion_Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expansion_Geometry& operator=(Expansion_Geometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Expansion_Geometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expansion_Geometry* internal_default_instance() {
    return reinterpret_cast<const Expansion_Geometry*>(
               &_Expansion_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Expansion_Geometry& a, Expansion_Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Expansion_Geometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expansion_Geometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expansion_Geometry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expansion_Geometry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Expansion_Geometry& from);
  void MergeFrom(const Expansion_Geometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Expansion_Geometry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Expansion.Geometry";
  }
  protected:
  explicit Expansion_Geometry(::google::protobuf::Arena* arena);
  Expansion_Geometry(::google::protobuf::Arena* arena, const Expansion_Geometry& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 1,
  };
  // repeated sint32 coords = 1 [packed = true];
  int coords_size() const;
  private:
  int _internal_coords_size() const;

  public:
  void clear_coords() ;
  ::int32_t coords(int index) const;
  void set_coords(int index, ::int32_t value);
  void add_coords(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& coords() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_coords();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_coords() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_coords();

  public:
  // @@protoc_insertion_point(class_scope:valhalla.Expansion.Geometry)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> coords_;
    mutable ::google::protobuf::internal::CachedSize _coords_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expansion_2eproto;
};// -------------------------------------------------------------------

class Expansion final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Expansion) */ {
 public:
  inline Expansion() : Expansion(nullptr) {}
  ~Expansion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Expansion(::google::protobuf::internal::ConstantInitialized);

  inline Expansion(const Expansion& from)
      : Expansion(nullptr, from) {}
  Expansion(Expansion&& from) noexcept
    : Expansion() {
    *this = ::std::move(from);
  }

  inline Expansion& operator=(const Expansion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expansion& operator=(Expansion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Expansion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expansion* internal_default_instance() {
    return reinterpret_cast<const Expansion*>(
               &_Expansion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Expansion& a, Expansion& b) {
    a.Swap(&b);
  }
  inline void Swap(Expansion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expansion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expansion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expansion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Expansion& from);
  void MergeFrom(const Expansion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Expansion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Expansion";
  }
  protected:
  explicit Expansion(::google::protobuf::Arena* arena);
  Expansion(::google::protobuf::Arena* arena, const Expansion& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Geometry = Expansion_Geometry;

  using EdgeStatus = Expansion_EdgeStatus;
  static constexpr EdgeStatus connected = Expansion_EdgeStatus_connected;
  static constexpr EdgeStatus settled = Expansion_EdgeStatus_settled;
  static constexpr EdgeStatus reached = Expansion_EdgeStatus_reached;
  static inline bool EdgeStatus_IsValid(int value) {
    return Expansion_EdgeStatus_IsValid(value);
  }
  static constexpr EdgeStatus EdgeStatus_MIN = Expansion_EdgeStatus_EdgeStatus_MIN;
  static constexpr EdgeStatus EdgeStatus_MAX = Expansion_EdgeStatus_EdgeStatus_MAX;
  static constexpr int EdgeStatus_ARRAYSIZE = Expansion_EdgeStatus_EdgeStatus_ARRAYSIZE;
  template <typename T>
  static inline const std::string& EdgeStatus_Name(T value) {
    return Expansion_EdgeStatus_Name(value);
  }
  static inline bool EdgeStatus_Parse(absl::string_view name, EdgeStatus* value) {
    return Expansion_EdgeStatus_Parse(name, value);
  }

  using ExpansionType = Expansion_ExpansionType;
  static constexpr ExpansionType forward = Expansion_ExpansionType_forward;
  static constexpr ExpansionType reverse = Expansion_ExpansionType_reverse;
  static inline bool ExpansionType_IsValid(int value) {
    return Expansion_ExpansionType_IsValid(value);
  }
  static constexpr ExpansionType ExpansionType_MIN = Expansion_ExpansionType_ExpansionType_MIN;
  static constexpr ExpansionType ExpansionType_MAX = Expansion_ExpansionType_ExpansionType_MAX;
  static constexpr int ExpansionType_ARRAYSIZE = Expansion_ExpansionType_ExpansionType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& ExpansionType_Name(T value) {
    return Expansion_ExpansionType_Name(value);
  }
  static inline bool ExpansionType_Parse(absl::string_view name, ExpansionType* value) {
    return Expansion_ExpansionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCostsFieldNumber = 1,
    kDurationsFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kEdgeStatusFieldNumber = 4,
    kEdgeIdFieldNumber = 5,
    kPredEdgeIdFieldNumber = 6,
    kGeometriesFieldNumber = 7,
    kExpansionTypeFieldNumber = 8,
  };
  // repeated uint32 costs = 1 [packed = true];
  int costs_size() const;
  private:
  int _internal_costs_size() const;

  public:
  void clear_costs() ;
  ::uint32_t costs(int index) const;
  void set_costs(int index, ::uint32_t value);
  void add_costs(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& costs() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_costs();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_costs() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_costs();

  public:
  // repeated uint32 durations = 2 [packed = true];
  int durations_size() const;
  private:
  int _internal_durations_size() const;

  public:
  void clear_durations() ;
  ::uint32_t durations(int index) const;
  void set_durations(int index, ::uint32_t value);
  void add_durations(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& durations() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_durations();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_durations() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_durations();

  public:
  // repeated uint32 distances = 3 [packed = true];
  int distances_size() const;
  private:
  int _internal_distances_size() const;

  public:
  void clear_distances() ;
  ::uint32_t distances(int index) const;
  void set_distances(int index, ::uint32_t value);
  void add_distances(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& distances() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_distances();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_distances() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_distances();

  public:
  // repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
  int edge_status_size() const;
  private:
  int _internal_edge_status_size() const;

  public:
  void clear_edge_status() ;
  public:
  ::valhalla::Expansion_EdgeStatus edge_status(int index) const;
  void set_edge_status(int index, ::valhalla::Expansion_EdgeStatus value);
  void add_edge_status(::valhalla::Expansion_EdgeStatus value);
  const ::google::protobuf::RepeatedField<int>& edge_status() const;
  ::google::protobuf::RepeatedField<int>* mutable_edge_status();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_edge_status() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_edge_status();

  public:
  // repeated uint32 edge_id = 5 [packed = true];
  int edge_id_size() const;
  private:
  int _internal_edge_id_size() const;

  public:
  void clear_edge_id() ;
  ::uint32_t edge_id(int index) const;
  void set_edge_id(int index, ::uint32_t value);
  void add_edge_id(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& edge_id() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_edge_id();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_edge_id() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_edge_id();

  public:
  // repeated uint32 pred_edge_id = 6 [packed = true];
  int pred_edge_id_size() const;
  private:
  int _internal_pred_edge_id_size() const;

  public:
  void clear_pred_edge_id() ;
  ::uint32_t pred_edge_id(int index) const;
  void set_pred_edge_id(int index, ::uint32_t value);
  void add_pred_edge_id(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& pred_edge_id() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_pred_edge_id();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_pred_edge_id() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_pred_edge_id();

  public:
  // repeated .valhalla.Expansion.Geometry geometries = 7;
  int geometries_size() const;
  private:
  int _internal_geometries_size() const;

  public:
  void clear_geometries() ;
  ::valhalla::Expansion_Geometry* mutable_geometries(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::Expansion_Geometry >*
      mutable_geometries();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::Expansion_Geometry>& _internal_geometries() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::Expansion_Geometry>* _internal_mutable_geometries();
  public:
  const ::valhalla::Expansion_Geometry& geometries(int index) const;
  ::valhalla::Expansion_Geometry* add_geometries();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::Expansion_Geometry >&
      geometries() const;
  // repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
  int expansion_type_size() const;
  private:
  int _internal_expansion_type_size() const;

  public:
  void clear_expansion_type() ;
  public:
  ::valhalla::Expansion_ExpansionType expansion_type(int index) const;
  void set_expansion_type(int index, ::valhalla::Expansion_ExpansionType value);
  void add_expansion_type(::valhalla::Expansion_ExpansionType value);
  const ::google::protobuf::RepeatedField<int>& expansion_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_expansion_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_expansion_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_expansion_type();

  public:
  // @@protoc_insertion_point(class_scope:valhalla.Expansion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::uint32_t> costs_;
    mutable ::google::protobuf::internal::CachedSize _costs_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> durations_;
    mutable ::google::protobuf::internal::CachedSize _durations_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> distances_;
    mutable ::google::protobuf::internal::CachedSize _distances_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> edge_status_;
    mutable ::google::protobuf::internal::CachedSize _edge_status_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> edge_id_;
    mutable ::google::protobuf::internal::CachedSize _edge_id_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> pred_edge_id_;
    mutable ::google::protobuf::internal::CachedSize _pred_edge_id_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::Expansion_Geometry > geometries_;
    ::google::protobuf::RepeatedField<int> expansion_type_;
    mutable ::google::protobuf::internal::CachedSize _expansion_type_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expansion_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Expansion_Geometry

// repeated sint32 coords = 1 [packed = true];
inline int Expansion_Geometry::_internal_coords_size() const {
  return _internal_coords().size();
}
inline int Expansion_Geometry::coords_size() const {
  return _internal_coords_size();
}
inline void Expansion_Geometry::clear_coords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coords_.Clear();
}
inline ::int32_t Expansion_Geometry::coords(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.Geometry.coords)
  return _internal_coords().Get(index);
}
inline void Expansion_Geometry::set_coords(int index, ::int32_t value) {
  _internal_mutable_coords()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.Geometry.coords)
}
inline void Expansion_Geometry::add_coords(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coords()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.Geometry.coords)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Expansion_Geometry::coords() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.Geometry.coords)
  return _internal_coords();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Expansion_Geometry::mutable_coords()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.Geometry.coords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coords();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Expansion_Geometry::_internal_coords()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coords_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Expansion_Geometry::_internal_mutable_coords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coords_;
}

// -------------------------------------------------------------------

// Expansion

// repeated uint32 costs = 1 [packed = true];
inline int Expansion::_internal_costs_size() const {
  return _internal_costs().size();
}
inline int Expansion::costs_size() const {
  return _internal_costs_size();
}
inline void Expansion::clear_costs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.costs_.Clear();
}
inline ::uint32_t Expansion::costs(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.costs)
  return _internal_costs().Get(index);
}
inline void Expansion::set_costs(int index, ::uint32_t value) {
  _internal_mutable_costs()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.costs)
}
inline void Expansion::add_costs(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_costs()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.costs)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::costs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.costs)
  return _internal_costs();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::mutable_costs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.costs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_costs();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::_internal_costs()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.costs_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::_internal_mutable_costs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.costs_;
}

// repeated uint32 durations = 2 [packed = true];
inline int Expansion::_internal_durations_size() const {
  return _internal_durations().size();
}
inline int Expansion::durations_size() const {
  return _internal_durations_size();
}
inline void Expansion::clear_durations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.durations_.Clear();
}
inline ::uint32_t Expansion::durations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.durations)
  return _internal_durations().Get(index);
}
inline void Expansion::set_durations(int index, ::uint32_t value) {
  _internal_mutable_durations()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.durations)
}
inline void Expansion::add_durations(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_durations()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.durations)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::durations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.durations)
  return _internal_durations();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::mutable_durations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.durations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_durations();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::_internal_durations()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.durations_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::_internal_mutable_durations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.durations_;
}

// repeated uint32 distances = 3 [packed = true];
inline int Expansion::_internal_distances_size() const {
  return _internal_distances().size();
}
inline int Expansion::distances_size() const {
  return _internal_distances_size();
}
inline void Expansion::clear_distances() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.distances_.Clear();
}
inline ::uint32_t Expansion::distances(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.distances)
  return _internal_distances().Get(index);
}
inline void Expansion::set_distances(int index, ::uint32_t value) {
  _internal_mutable_distances()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.distances)
}
inline void Expansion::add_distances(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_distances()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.distances)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::distances() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.distances)
  return _internal_distances();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::mutable_distances()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.distances)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_distances();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::_internal_distances()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.distances_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::_internal_mutable_distances() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.distances_;
}

// repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
inline int Expansion::_internal_edge_status_size() const {
  return _internal_edge_status().size();
}
inline int Expansion::edge_status_size() const {
  return _internal_edge_status_size();
}
inline void Expansion::clear_edge_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.edge_status_.Clear();
}
inline ::valhalla::Expansion_EdgeStatus Expansion::edge_status(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.edge_status)
  return static_cast<::valhalla::Expansion_EdgeStatus>(_internal_edge_status().Get(index));
}
inline void Expansion::set_edge_status(int index, ::valhalla::Expansion_EdgeStatus value) {
  _internal_mutable_edge_status()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.edge_status)
}
inline void Expansion::add_edge_status(::valhalla::Expansion_EdgeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_edge_status()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.edge_status)
}
inline const ::google::protobuf::RepeatedField<int>& Expansion::edge_status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.edge_status)
  return _internal_edge_status();
}
inline ::google::protobuf::RepeatedField<int>* Expansion::mutable_edge_status()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.edge_status)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_edge_status();
}
inline const ::google::protobuf::RepeatedField<int>& Expansion::_internal_edge_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.edge_status_;
}
inline ::google::protobuf::RepeatedField<int>* Expansion::_internal_mutable_edge_status() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.edge_status_;
}

// repeated uint32 edge_id = 5 [packed = true];
inline int Expansion::_internal_edge_id_size() const {
  return _internal_edge_id().size();
}
inline int Expansion::edge_id_size() const {
  return _internal_edge_id_size();
}
inline void Expansion::clear_edge_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.edge_id_.Clear();
}
inline ::uint32_t Expansion::edge_id(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.edge_id)
  return _internal_edge_id().Get(index);
}
inline void Expansion::set_edge_id(int index, ::uint32_t value) {
  _internal_mutable_edge_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.edge_id)
}
inline void Expansion::add_edge_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_edge_id()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.edge_id)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::edge_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.edge_id)
  return _internal_edge_id();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::mutable_edge_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.edge_id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_edge_id();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::_internal_edge_id()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.edge_id_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::_internal_mutable_edge_id() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.edge_id_;
}

// repeated uint32 pred_edge_id = 6 [packed = true];
inline int Expansion::_internal_pred_edge_id_size() const {
  return _internal_pred_edge_id().size();
}
inline int Expansion::pred_edge_id_size() const {
  return _internal_pred_edge_id_size();
}
inline void Expansion::clear_pred_edge_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pred_edge_id_.Clear();
}
inline ::uint32_t Expansion::pred_edge_id(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.pred_edge_id)
  return _internal_pred_edge_id().Get(index);
}
inline void Expansion::set_pred_edge_id(int index, ::uint32_t value) {
  _internal_mutable_pred_edge_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.pred_edge_id)
}
inline void Expansion::add_pred_edge_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pred_edge_id()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.pred_edge_id)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::pred_edge_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.pred_edge_id)
  return _internal_pred_edge_id();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::mutable_pred_edge_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.pred_edge_id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pred_edge_id();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Expansion::_internal_pred_edge_id()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pred_edge_id_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Expansion::_internal_mutable_pred_edge_id() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pred_edge_id_;
}

// repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
inline int Expansion::_internal_expansion_type_size() const {
  return _internal_expansion_type().size();
}
inline int Expansion::expansion_type_size() const {
  return _internal_expansion_type_size();
}
inline void Expansion::clear_expansion_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expansion_type_.Clear();
}
inline ::valhalla::Expansion_ExpansionType Expansion::expansion_type(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.expansion_type)
  return static_cast<::valhalla::Expansion_ExpansionType>(_internal_expansion_type().Get(index));
}
inline void Expansion::set_expansion_type(int index, ::valhalla::Expansion_ExpansionType value) {
  _internal_mutable_expansion_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.expansion_type)
}
inline void Expansion::add_expansion_type(::valhalla::Expansion_ExpansionType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_expansion_type()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.expansion_type)
}
inline const ::google::protobuf::RepeatedField<int>& Expansion::expansion_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.expansion_type)
  return _internal_expansion_type();
}
inline ::google::protobuf::RepeatedField<int>* Expansion::mutable_expansion_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.expansion_type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_expansion_type();
}
inline const ::google::protobuf::RepeatedField<int>& Expansion::_internal_expansion_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expansion_type_;
}
inline ::google::protobuf::RepeatedField<int>* Expansion::_internal_mutable_expansion_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.expansion_type_;
}

// repeated .valhalla.Expansion.Geometry geometries = 7;
inline int Expansion::_internal_geometries_size() const {
  return _internal_geometries().size();
}
inline int Expansion::geometries_size() const {
  return _internal_geometries_size();
}
inline void Expansion::clear_geometries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.geometries_.Clear();
}
inline ::valhalla::Expansion_Geometry* Expansion::mutable_geometries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Expansion.geometries)
  return _internal_mutable_geometries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Expansion_Geometry>* Expansion::mutable_geometries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.geometries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_geometries();
}
inline const ::valhalla::Expansion_Geometry& Expansion::geometries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.geometries)
  return _internal_geometries().Get(index);
}
inline ::valhalla::Expansion_Geometry* Expansion::add_geometries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::Expansion_Geometry* _add = _internal_mutable_geometries()->Add();
  // @@protoc_insertion_point(field_add:valhalla.Expansion.geometries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Expansion_Geometry>& Expansion::geometries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.geometries)
  return _internal_geometries();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Expansion_Geometry>&
Expansion::_internal_geometries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.geometries_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Expansion_Geometry>*
Expansion::_internal_mutable_geometries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.geometries_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::valhalla::Expansion_EdgeStatus> : std::true_type {};
template <>
struct is_proto_enum<::valhalla::Expansion_ExpansionType> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_expansion_2eproto_2epb_2eh
