// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: incidents.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_incidents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_incidents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_incidents_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_incidents_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class IncidentsTile;
struct IncidentsTileDefaultTypeInternal;
extern IncidentsTileDefaultTypeInternal _IncidentsTile_default_instance_;
class IncidentsTile_Location;
struct IncidentsTile_LocationDefaultTypeInternal;
extern IncidentsTile_LocationDefaultTypeInternal _IncidentsTile_Location_default_instance_;
class IncidentsTile_Metadata;
struct IncidentsTile_MetadataDefaultTypeInternal;
extern IncidentsTile_MetadataDefaultTypeInternal _IncidentsTile_Metadata_default_instance_;
class IncidentsTile_Metadata_Congestion;
struct IncidentsTile_Metadata_CongestionDefaultTypeInternal;
extern IncidentsTile_Metadata_CongestionDefaultTypeInternal _IncidentsTile_Metadata_Congestion_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {
enum IncidentsTile_Metadata_Type : int {
  IncidentsTile_Metadata_Type_ACCIDENT = 0,
  IncidentsTile_Metadata_Type_CONGESTION = 1,
  IncidentsTile_Metadata_Type_CONSTRUCTION = 2,
  IncidentsTile_Metadata_Type_DISABLED_VEHICLE = 3,
  IncidentsTile_Metadata_Type_LANE_RESTRICTION = 4,
  IncidentsTile_Metadata_Type_MASS_TRANSIT = 5,
  IncidentsTile_Metadata_Type_MISCELLANEOUS = 6,
  IncidentsTile_Metadata_Type_OTHER_NEWS = 7,
  IncidentsTile_Metadata_Type_PLANNED_EVENT = 8,
  IncidentsTile_Metadata_Type_ROAD_CLOSURE = 9,
  IncidentsTile_Metadata_Type_ROAD_HAZARD = 10,
  IncidentsTile_Metadata_Type_WEATHER = 11,
  IncidentsTile_Metadata_Type_IncidentsTile_Metadata_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IncidentsTile_Metadata_Type_IncidentsTile_Metadata_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IncidentsTile_Metadata_Type_IsValid(int value);
extern const uint32_t IncidentsTile_Metadata_Type_internal_data_[];
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata_Type_Type_MIN = static_cast<IncidentsTile_Metadata_Type>(0);
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata_Type_Type_MAX = static_cast<IncidentsTile_Metadata_Type>(11);
constexpr int IncidentsTile_Metadata_Type_Type_ARRAYSIZE = 11 + 1;
const std::string& IncidentsTile_Metadata_Type_Name(IncidentsTile_Metadata_Type value);
template <typename T>
const std::string& IncidentsTile_Metadata_Type_Name(T value) {
  static_assert(std::is_same<T, IncidentsTile_Metadata_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return IncidentsTile_Metadata_Type_Name(static_cast<IncidentsTile_Metadata_Type>(value));
}
const std::string& IncidentsTile_Metadata_Type_Name(IncidentsTile_Metadata_Type value);
bool IncidentsTile_Metadata_Type_Parse(absl::string_view name, IncidentsTile_Metadata_Type* value);
enum IncidentsTile_Metadata_Impact : int {
  IncidentsTile_Metadata_Impact_UNKNOWN = 0,
  IncidentsTile_Metadata_Impact_CRITICAL = 1,
  IncidentsTile_Metadata_Impact_MAJOR = 2,
  IncidentsTile_Metadata_Impact_MINOR = 3,
  IncidentsTile_Metadata_Impact_LOW = 4,
  IncidentsTile_Metadata_Impact_IncidentsTile_Metadata_Impact_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IncidentsTile_Metadata_Impact_IncidentsTile_Metadata_Impact_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IncidentsTile_Metadata_Impact_IsValid(int value);
extern const uint32_t IncidentsTile_Metadata_Impact_internal_data_[];
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata_Impact_Impact_MIN = static_cast<IncidentsTile_Metadata_Impact>(0);
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata_Impact_Impact_MAX = static_cast<IncidentsTile_Metadata_Impact>(4);
constexpr int IncidentsTile_Metadata_Impact_Impact_ARRAYSIZE = 4 + 1;
const std::string& IncidentsTile_Metadata_Impact_Name(IncidentsTile_Metadata_Impact value);
template <typename T>
const std::string& IncidentsTile_Metadata_Impact_Name(T value) {
  static_assert(std::is_same<T, IncidentsTile_Metadata_Impact>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Impact_Name().");
  return IncidentsTile_Metadata_Impact_Name(static_cast<IncidentsTile_Metadata_Impact>(value));
}
const std::string& IncidentsTile_Metadata_Impact_Name(IncidentsTile_Metadata_Impact value);
bool IncidentsTile_Metadata_Impact_Parse(absl::string_view name, IncidentsTile_Metadata_Impact* value);

// ===================================================================


// -------------------------------------------------------------------

class IncidentsTile_Metadata_Congestion final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile.Metadata.Congestion) */ {
 public:
  inline IncidentsTile_Metadata_Congestion() : IncidentsTile_Metadata_Congestion(nullptr) {}
  ~IncidentsTile_Metadata_Congestion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentsTile_Metadata_Congestion(::google::protobuf::internal::ConstantInitialized);

  inline IncidentsTile_Metadata_Congestion(const IncidentsTile_Metadata_Congestion& from)
      : IncidentsTile_Metadata_Congestion(nullptr, from) {}
  IncidentsTile_Metadata_Congestion(IncidentsTile_Metadata_Congestion&& from) noexcept
    : IncidentsTile_Metadata_Congestion() {
    *this = ::std::move(from);
  }

  inline IncidentsTile_Metadata_Congestion& operator=(const IncidentsTile_Metadata_Congestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentsTile_Metadata_Congestion& operator=(IncidentsTile_Metadata_Congestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncidentsTile_Metadata_Congestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentsTile_Metadata_Congestion* internal_default_instance() {
    return reinterpret_cast<const IncidentsTile_Metadata_Congestion*>(
               &_IncidentsTile_Metadata_Congestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncidentsTile_Metadata_Congestion& a, IncidentsTile_Metadata_Congestion& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentsTile_Metadata_Congestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentsTile_Metadata_Congestion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentsTile_Metadata_Congestion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidentsTile_Metadata_Congestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const IncidentsTile_Metadata_Congestion& from);
  void MergeFrom(const IncidentsTile_Metadata_Congestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IncidentsTile_Metadata_Congestion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.IncidentsTile.Metadata.Congestion";
  }
  protected:
  explicit IncidentsTile_Metadata_Congestion(::google::protobuf::Arena* arena);
  IncidentsTile_Metadata_Congestion(::google::protobuf::Arena* arena, const IncidentsTile_Metadata_Congestion& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value() ;
  ::uint32_t value() const;
  void set_value(::uint32_t value);

  private:
  ::uint32_t _internal_value() const;
  void _internal_set_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile.Metadata.Congestion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incidents_2eproto;
};// -------------------------------------------------------------------

class IncidentsTile_Location final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile.Location) */ {
 public:
  inline IncidentsTile_Location() : IncidentsTile_Location(nullptr) {}
  ~IncidentsTile_Location() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentsTile_Location(::google::protobuf::internal::ConstantInitialized);

  inline IncidentsTile_Location(const IncidentsTile_Location& from)
      : IncidentsTile_Location(nullptr, from) {}
  IncidentsTile_Location(IncidentsTile_Location&& from) noexcept
    : IncidentsTile_Location() {
    *this = ::std::move(from);
  }

  inline IncidentsTile_Location& operator=(const IncidentsTile_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentsTile_Location& operator=(IncidentsTile_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncidentsTile_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentsTile_Location* internal_default_instance() {
    return reinterpret_cast<const IncidentsTile_Location*>(
               &_IncidentsTile_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IncidentsTile_Location& a, IncidentsTile_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentsTile_Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentsTile_Location* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentsTile_Location* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidentsTile_Location>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const IncidentsTile_Location& from);
  void MergeFrom(const IncidentsTile_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IncidentsTile_Location* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.IncidentsTile.Location";
  }
  protected:
  explicit IncidentsTile_Location(::google::protobuf::Arena* arena);
  IncidentsTile_Location(::google::protobuf::Arena* arena, const IncidentsTile_Location& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIndexFieldNumber = 1,
    kStartOffsetFieldNumber = 2,
    kEndOffsetFieldNumber = 3,
    kMetadataIndexFieldNumber = 4,
  };
  // uint32 edge_index = 1;
  void clear_edge_index() ;
  ::uint32_t edge_index() const;
  void set_edge_index(::uint32_t value);

  private:
  ::uint32_t _internal_edge_index() const;
  void _internal_set_edge_index(::uint32_t value);

  public:
  // float start_offset = 2;
  void clear_start_offset() ;
  float start_offset() const;
  void set_start_offset(float value);

  private:
  float _internal_start_offset() const;
  void _internal_set_start_offset(float value);

  public:
  // float end_offset = 3;
  void clear_end_offset() ;
  float end_offset() const;
  void set_end_offset(float value);

  private:
  float _internal_end_offset() const;
  void _internal_set_end_offset(float value);

  public:
  // uint32 metadata_index = 4;
  void clear_metadata_index() ;
  ::uint32_t metadata_index() const;
  void set_metadata_index(::uint32_t value);

  private:
  ::uint32_t _internal_metadata_index() const;
  void _internal_set_metadata_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile.Location)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t edge_index_;
    float start_offset_;
    float end_offset_;
    ::uint32_t metadata_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incidents_2eproto;
};// -------------------------------------------------------------------

class IncidentsTile_Metadata final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile.Metadata) */ {
 public:
  inline IncidentsTile_Metadata() : IncidentsTile_Metadata(nullptr) {}
  ~IncidentsTile_Metadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentsTile_Metadata(::google::protobuf::internal::ConstantInitialized);

  inline IncidentsTile_Metadata(const IncidentsTile_Metadata& from)
      : IncidentsTile_Metadata(nullptr, from) {}
  IncidentsTile_Metadata(IncidentsTile_Metadata&& from) noexcept
    : IncidentsTile_Metadata() {
    *this = ::std::move(from);
  }

  inline IncidentsTile_Metadata& operator=(const IncidentsTile_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentsTile_Metadata& operator=(IncidentsTile_Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncidentsTile_Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentsTile_Metadata* internal_default_instance() {
    return reinterpret_cast<const IncidentsTile_Metadata*>(
               &_IncidentsTile_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IncidentsTile_Metadata& a, IncidentsTile_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentsTile_Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentsTile_Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentsTile_Metadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidentsTile_Metadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const IncidentsTile_Metadata& from);
  void MergeFrom(const IncidentsTile_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IncidentsTile_Metadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.IncidentsTile.Metadata";
  }
  protected:
  explicit IncidentsTile_Metadata(::google::protobuf::Arena* arena);
  IncidentsTile_Metadata(::google::protobuf::Arena* arena, const IncidentsTile_Metadata& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Congestion = IncidentsTile_Metadata_Congestion;

  using Type = IncidentsTile_Metadata_Type;
  static constexpr Type ACCIDENT = IncidentsTile_Metadata_Type_ACCIDENT;
  static constexpr Type CONGESTION = IncidentsTile_Metadata_Type_CONGESTION;
  static constexpr Type CONSTRUCTION = IncidentsTile_Metadata_Type_CONSTRUCTION;
  static constexpr Type DISABLED_VEHICLE = IncidentsTile_Metadata_Type_DISABLED_VEHICLE;
  static constexpr Type LANE_RESTRICTION = IncidentsTile_Metadata_Type_LANE_RESTRICTION;
  static constexpr Type MASS_TRANSIT = IncidentsTile_Metadata_Type_MASS_TRANSIT;
  static constexpr Type MISCELLANEOUS = IncidentsTile_Metadata_Type_MISCELLANEOUS;
  static constexpr Type OTHER_NEWS = IncidentsTile_Metadata_Type_OTHER_NEWS;
  static constexpr Type PLANNED_EVENT = IncidentsTile_Metadata_Type_PLANNED_EVENT;
  static constexpr Type ROAD_CLOSURE = IncidentsTile_Metadata_Type_ROAD_CLOSURE;
  static constexpr Type ROAD_HAZARD = IncidentsTile_Metadata_Type_ROAD_HAZARD;
  static constexpr Type WEATHER = IncidentsTile_Metadata_Type_WEATHER;
  static inline bool Type_IsValid(int value) {
    return IncidentsTile_Metadata_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = IncidentsTile_Metadata_Type_Type_MIN;
  static constexpr Type Type_MAX = IncidentsTile_Metadata_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = IncidentsTile_Metadata_Type_Type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return IncidentsTile_Metadata_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return IncidentsTile_Metadata_Type_Parse(name, value);
  }

  using Impact = IncidentsTile_Metadata_Impact;
  static constexpr Impact UNKNOWN = IncidentsTile_Metadata_Impact_UNKNOWN;
  static constexpr Impact CRITICAL = IncidentsTile_Metadata_Impact_CRITICAL;
  static constexpr Impact MAJOR = IncidentsTile_Metadata_Impact_MAJOR;
  static constexpr Impact MINOR = IncidentsTile_Metadata_Impact_MINOR;
  static constexpr Impact LOW = IncidentsTile_Metadata_Impact_LOW;
  static inline bool Impact_IsValid(int value) {
    return IncidentsTile_Metadata_Impact_IsValid(value);
  }
  static constexpr Impact Impact_MIN = IncidentsTile_Metadata_Impact_Impact_MIN;
  static constexpr Impact Impact_MAX = IncidentsTile_Metadata_Impact_Impact_MAX;
  static constexpr int Impact_ARRAYSIZE = IncidentsTile_Metadata_Impact_Impact_ARRAYSIZE;
  template <typename T>
  static inline const std::string& Impact_Name(T value) {
    return IncidentsTile_Metadata_Impact_Name(value);
  }
  static inline bool Impact_Parse(absl::string_view name, Impact* value) {
    return IncidentsTile_Metadata_Impact_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlertcCodesFieldNumber = 2,
    kLanesBlockedFieldNumber = 12,
    kDescriptionFieldNumber = 3,
    kSubTypeFieldNumber = 4,
    kSubTypeDescriptionFieldNumber = 5,
    kLongDescriptionFieldNumber = 14,
    kClearLanesFieldNumber = 15,
    kIso31661Alpha2FieldNumber = 129,
    kIso31661Alpha3FieldNumber = 130,
    kCongestionFieldNumber = 11,
    kTypeFieldNumber = 1,
    kImpactFieldNumber = 9,
    kStartTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kCreationTimeFieldNumber = 13,
    kRoadClosedFieldNumber = 10,
    kLengthFieldNumber = 17,
    kNumLanesBlockedFieldNumber = 16,
    kIdFieldNumber = 128,
  };
  // repeated uint32 alertc_codes = 2;
  int alertc_codes_size() const;
  private:
  int _internal_alertc_codes_size() const;

  public:
  void clear_alertc_codes() ;
  ::uint32_t alertc_codes(int index) const;
  void set_alertc_codes(int index, ::uint32_t value);
  void add_alertc_codes(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& alertc_codes() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_alertc_codes();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_alertc_codes() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_alertc_codes();

  public:
  // repeated string lanes_blocked = 12;
  int lanes_blocked_size() const;
  private:
  int _internal_lanes_blocked_size() const;

  public:
  void clear_lanes_blocked() ;
  const std::string& lanes_blocked(int index) const;
  std::string* mutable_lanes_blocked(int index);
  void set_lanes_blocked(int index, const std::string& value);
  void set_lanes_blocked(int index, std::string&& value);
  void set_lanes_blocked(int index, const char* value);
  void set_lanes_blocked(int index, const char* value, std::size_t size);
  void set_lanes_blocked(int index, absl::string_view value);
  std::string* add_lanes_blocked();
  void add_lanes_blocked(const std::string& value);
  void add_lanes_blocked(std::string&& value);
  void add_lanes_blocked(const char* value);
  void add_lanes_blocked(const char* value, std::size_t size);
  void add_lanes_blocked(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& lanes_blocked() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_lanes_blocked();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_lanes_blocked() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_lanes_blocked();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string sub_type = 4;
  void clear_sub_type() ;
  const std::string& sub_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sub_type(Arg_&& arg, Args_... args);
  std::string* mutable_sub_type();
  PROTOBUF_NODISCARD std::string* release_sub_type();
  void set_allocated_sub_type(std::string* value);

  private:
  const std::string& _internal_sub_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type(
      const std::string& value);
  std::string* _internal_mutable_sub_type();

  public:
  // string sub_type_description = 5;
  void clear_sub_type_description() ;
  const std::string& sub_type_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sub_type_description(Arg_&& arg, Args_... args);
  std::string* mutable_sub_type_description();
  PROTOBUF_NODISCARD std::string* release_sub_type_description();
  void set_allocated_sub_type_description(std::string* value);

  private:
  const std::string& _internal_sub_type_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_type_description(
      const std::string& value);
  std::string* _internal_mutable_sub_type_description();

  public:
  // string long_description = 14;
  void clear_long_description() ;
  const std::string& long_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_description(Arg_&& arg, Args_... args);
  std::string* mutable_long_description();
  PROTOBUF_NODISCARD std::string* release_long_description();
  void set_allocated_long_description(std::string* value);

  private:
  const std::string& _internal_long_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_description(
      const std::string& value);
  std::string* _internal_mutable_long_description();

  public:
  // string clear_lanes = 15;
  void clear_clear_lanes() ;
  const std::string& clear_lanes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clear_lanes(Arg_&& arg, Args_... args);
  std::string* mutable_clear_lanes();
  PROTOBUF_NODISCARD std::string* release_clear_lanes();
  void set_allocated_clear_lanes(std::string* value);

  private:
  const std::string& _internal_clear_lanes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clear_lanes(
      const std::string& value);
  std::string* _internal_mutable_clear_lanes();

  public:
  // string iso_3166_1_alpha2 = 129;
  void clear_iso_3166_1_alpha2() ;
  const std::string& iso_3166_1_alpha2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iso_3166_1_alpha2(Arg_&& arg, Args_... args);
  std::string* mutable_iso_3166_1_alpha2();
  PROTOBUF_NODISCARD std::string* release_iso_3166_1_alpha2();
  void set_allocated_iso_3166_1_alpha2(std::string* value);

  private:
  const std::string& _internal_iso_3166_1_alpha2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iso_3166_1_alpha2(
      const std::string& value);
  std::string* _internal_mutable_iso_3166_1_alpha2();

  public:
  // string iso_3166_1_alpha3 = 130;
  void clear_iso_3166_1_alpha3() ;
  const std::string& iso_3166_1_alpha3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iso_3166_1_alpha3(Arg_&& arg, Args_... args);
  std::string* mutable_iso_3166_1_alpha3();
  PROTOBUF_NODISCARD std::string* release_iso_3166_1_alpha3();
  void set_allocated_iso_3166_1_alpha3(std::string* value);

  private:
  const std::string& _internal_iso_3166_1_alpha3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iso_3166_1_alpha3(
      const std::string& value);
  std::string* _internal_mutable_iso_3166_1_alpha3();

  public:
  // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
  bool has_congestion() const;
  void clear_congestion() ;
  const ::valhalla::IncidentsTile_Metadata_Congestion& congestion() const;
  PROTOBUF_NODISCARD ::valhalla::IncidentsTile_Metadata_Congestion* release_congestion();
  ::valhalla::IncidentsTile_Metadata_Congestion* mutable_congestion();
  void set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* value);
  void unsafe_arena_set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* value);
  ::valhalla::IncidentsTile_Metadata_Congestion* unsafe_arena_release_congestion();

  private:
  const ::valhalla::IncidentsTile_Metadata_Congestion& _internal_congestion() const;
  ::valhalla::IncidentsTile_Metadata_Congestion* _internal_mutable_congestion();

  public:
  // .valhalla.IncidentsTile.Metadata.Type type = 1;
  void clear_type() ;
  ::valhalla::IncidentsTile_Metadata_Type type() const;
  void set_type(::valhalla::IncidentsTile_Metadata_Type value);

  private:
  ::valhalla::IncidentsTile_Metadata_Type _internal_type() const;
  void _internal_set_type(::valhalla::IncidentsTile_Metadata_Type value);

  public:
  // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
  void clear_impact() ;
  ::valhalla::IncidentsTile_Metadata_Impact impact() const;
  void set_impact(::valhalla::IncidentsTile_Metadata_Impact value);

  private:
  ::valhalla::IncidentsTile_Metadata_Impact _internal_impact() const;
  void _internal_set_impact(::valhalla::IncidentsTile_Metadata_Impact value);

  public:
  // uint64 start_time = 6;
  void clear_start_time() ;
  ::uint64_t start_time() const;
  void set_start_time(::uint64_t value);

  private:
  ::uint64_t _internal_start_time() const;
  void _internal_set_start_time(::uint64_t value);

  public:
  // uint64 end_time = 7;
  void clear_end_time() ;
  ::uint64_t end_time() const;
  void set_end_time(::uint64_t value);

  private:
  ::uint64_t _internal_end_time() const;
  void _internal_set_end_time(::uint64_t value);

  public:
  // uint64 creation_time = 13;
  void clear_creation_time() ;
  ::uint64_t creation_time() const;
  void set_creation_time(::uint64_t value);

  private:
  ::uint64_t _internal_creation_time() const;
  void _internal_set_creation_time(::uint64_t value);

  public:
  // bool road_closed = 10;
  void clear_road_closed() ;
  bool road_closed() const;
  void set_road_closed(bool value);

  private:
  bool _internal_road_closed() const;
  void _internal_set_road_closed(bool value);

  public:
  // uint32 length = 17;
  void clear_length() ;
  ::uint32_t length() const;
  void set_length(::uint32_t value);

  private:
  ::uint32_t _internal_length() const;
  void _internal_set_length(::uint32_t value);

  public:
  // uint64 num_lanes_blocked = 16;
  void clear_num_lanes_blocked() ;
  ::uint64_t num_lanes_blocked() const;
  void set_num_lanes_blocked(::uint64_t value);

  private:
  ::uint64_t _internal_num_lanes_blocked() const;
  void _internal_set_num_lanes_blocked(::uint64_t value);

  public:
  // uint64 id = 128;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile.Metadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 1,
      169, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> alertc_codes_;
    mutable ::google::protobuf::internal::CachedSize _alertc_codes_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> lanes_blocked_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr sub_type_;
    ::google::protobuf::internal::ArenaStringPtr sub_type_description_;
    ::google::protobuf::internal::ArenaStringPtr long_description_;
    ::google::protobuf::internal::ArenaStringPtr clear_lanes_;
    ::google::protobuf::internal::ArenaStringPtr iso_3166_1_alpha2_;
    ::google::protobuf::internal::ArenaStringPtr iso_3166_1_alpha3_;
    ::valhalla::IncidentsTile_Metadata_Congestion* congestion_;
    int type_;
    int impact_;
    ::uint64_t start_time_;
    ::uint64_t end_time_;
    ::uint64_t creation_time_;
    bool road_closed_;
    ::uint32_t length_;
    ::uint64_t num_lanes_blocked_;
    ::uint64_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incidents_2eproto;
};// -------------------------------------------------------------------

class IncidentsTile final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile) */ {
 public:
  inline IncidentsTile() : IncidentsTile(nullptr) {}
  ~IncidentsTile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IncidentsTile(::google::protobuf::internal::ConstantInitialized);

  inline IncidentsTile(const IncidentsTile& from)
      : IncidentsTile(nullptr, from) {}
  IncidentsTile(IncidentsTile&& from) noexcept
    : IncidentsTile() {
    *this = ::std::move(from);
  }

  inline IncidentsTile& operator=(const IncidentsTile& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentsTile& operator=(IncidentsTile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncidentsTile& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidentsTile* internal_default_instance() {
    return reinterpret_cast<const IncidentsTile*>(
               &_IncidentsTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncidentsTile& a, IncidentsTile& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentsTile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidentsTile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidentsTile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidentsTile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const IncidentsTile& from);
  void MergeFrom(const IncidentsTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IncidentsTile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.IncidentsTile";
  }
  protected:
  explicit IncidentsTile(::google::protobuf::Arena* arena);
  IncidentsTile(::google::protobuf::Arena* arena, const IncidentsTile& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Location = IncidentsTile_Location;
  using Metadata = IncidentsTile_Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // repeated .valhalla.IncidentsTile.Location locations = 1;
  int locations_size() const;
  private:
  int _internal_locations_size() const;

  public:
  void clear_locations() ;
  ::valhalla::IncidentsTile_Location* mutable_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >*
      mutable_locations();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Location>& _internal_locations() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Location>* _internal_mutable_locations();
  public:
  const ::valhalla::IncidentsTile_Location& locations(int index) const;
  ::valhalla::IncidentsTile_Location* add_locations();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >&
      locations() const;
  // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::valhalla::IncidentsTile_Metadata* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >*
      mutable_metadata();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Metadata>& _internal_metadata() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Metadata>* _internal_mutable_metadata();
  public:
  const ::valhalla::IncidentsTile_Metadata& metadata(int index) const;
  ::valhalla::IncidentsTile_Metadata* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >&
      metadata() const;
  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location > locations_;
    ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata > metadata_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_incidents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IncidentsTile_Location

// uint32 edge_index = 1;
inline void IncidentsTile_Location::clear_edge_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.edge_index_ = 0u;
}
inline ::uint32_t IncidentsTile_Location::edge_index() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.edge_index)
  return _internal_edge_index();
}
inline void IncidentsTile_Location::set_edge_index(::uint32_t value) {
  _internal_set_edge_index(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.edge_index)
}
inline ::uint32_t IncidentsTile_Location::_internal_edge_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.edge_index_;
}
inline void IncidentsTile_Location::_internal_set_edge_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.edge_index_ = value;
}

// float start_offset = 2;
inline void IncidentsTile_Location::clear_start_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_offset_ = 0;
}
inline float IncidentsTile_Location::start_offset() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.start_offset)
  return _internal_start_offset();
}
inline void IncidentsTile_Location::set_start_offset(float value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.start_offset)
}
inline float IncidentsTile_Location::_internal_start_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_offset_;
}
inline void IncidentsTile_Location::_internal_set_start_offset(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_offset_ = value;
}

// float end_offset = 3;
inline void IncidentsTile_Location::clear_end_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_offset_ = 0;
}
inline float IncidentsTile_Location::end_offset() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.end_offset)
  return _internal_end_offset();
}
inline void IncidentsTile_Location::set_end_offset(float value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.end_offset)
}
inline float IncidentsTile_Location::_internal_end_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_offset_;
}
inline void IncidentsTile_Location::_internal_set_end_offset(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_offset_ = value;
}

// uint32 metadata_index = 4;
inline void IncidentsTile_Location::clear_metadata_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_index_ = 0u;
}
inline ::uint32_t IncidentsTile_Location::metadata_index() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.metadata_index)
  return _internal_metadata_index();
}
inline void IncidentsTile_Location::set_metadata_index(::uint32_t value) {
  _internal_set_metadata_index(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.metadata_index)
}
inline ::uint32_t IncidentsTile_Location::_internal_metadata_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_index_;
}
inline void IncidentsTile_Location::_internal_set_metadata_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metadata_index_ = value;
}

// -------------------------------------------------------------------

// IncidentsTile_Metadata_Congestion

// uint32 value = 1;
inline void IncidentsTile_Metadata_Congestion::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0u;
}
inline ::uint32_t IncidentsTile_Metadata_Congestion::value() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.Congestion.value)
  return _internal_value();
}
inline void IncidentsTile_Metadata_Congestion::set_value(::uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.Congestion.value)
}
inline ::uint32_t IncidentsTile_Metadata_Congestion::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void IncidentsTile_Metadata_Congestion::_internal_set_value(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// IncidentsTile_Metadata

// .valhalla.IncidentsTile.Metadata.Type type = 1;
inline void IncidentsTile_Metadata::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::valhalla::IncidentsTile_Metadata_Type IncidentsTile_Metadata::type() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.type)
  return _internal_type();
}
inline void IncidentsTile_Metadata::set_type(::valhalla::IncidentsTile_Metadata_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.type)
}
inline ::valhalla::IncidentsTile_Metadata_Type IncidentsTile_Metadata::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::valhalla::IncidentsTile_Metadata_Type>(_impl_.type_);
}
inline void IncidentsTile_Metadata::_internal_set_type(::valhalla::IncidentsTile_Metadata_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// repeated uint32 alertc_codes = 2;
inline int IncidentsTile_Metadata::_internal_alertc_codes_size() const {
  return _internal_alertc_codes().size();
}
inline int IncidentsTile_Metadata::alertc_codes_size() const {
  return _internal_alertc_codes_size();
}
inline void IncidentsTile_Metadata::clear_alertc_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alertc_codes_.Clear();
}
inline ::uint32_t IncidentsTile_Metadata::alertc_codes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.alertc_codes)
  return _internal_alertc_codes().Get(index);
}
inline void IncidentsTile_Metadata::set_alertc_codes(int index, ::uint32_t value) {
  _internal_mutable_alertc_codes()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.alertc_codes)
}
inline void IncidentsTile_Metadata::add_alertc_codes(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_alertc_codes()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.alertc_codes)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& IncidentsTile_Metadata::alertc_codes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.Metadata.alertc_codes)
  return _internal_alertc_codes();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* IncidentsTile_Metadata::mutable_alertc_codes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.Metadata.alertc_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_alertc_codes();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& IncidentsTile_Metadata::_internal_alertc_codes()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alertc_codes_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* IncidentsTile_Metadata::_internal_mutable_alertc_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.alertc_codes_;
}

// string description = 3;
inline void IncidentsTile_Metadata::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.description)
}
inline std::string* IncidentsTile_Metadata::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.description)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.description)
  return _impl_.description_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.description)
}

// string sub_type = 4;
inline void IncidentsTile_Metadata::clear_sub_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::sub_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.sub_type)
  return _internal_sub_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_sub_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.sub_type)
}
inline std::string* IncidentsTile_Metadata::mutable_sub_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sub_type();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.sub_type)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_sub_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_type_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_sub_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_type_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_sub_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sub_type_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_sub_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.sub_type)
  return _impl_.sub_type_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_sub_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sub_type_.IsDefault()) {
          _impl_.sub_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.sub_type)
}

// string sub_type_description = 5;
inline void IncidentsTile_Metadata::clear_sub_type_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_description_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::sub_type_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.sub_type_description)
  return _internal_sub_type_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_sub_type_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_type_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.sub_type_description)
}
inline std::string* IncidentsTile_Metadata::mutable_sub_type_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sub_type_description();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.sub_type_description)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_sub_type_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_type_description_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_sub_type_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_type_description_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_sub_type_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sub_type_description_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_sub_type_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.sub_type_description)
  return _impl_.sub_type_description_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_sub_type_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_type_description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sub_type_description_.IsDefault()) {
          _impl_.sub_type_description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.sub_type_description)
}

// uint64 start_time = 6;
inline void IncidentsTile_Metadata::clear_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_ = ::uint64_t{0u};
}
inline ::uint64_t IncidentsTile_Metadata::start_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.start_time)
  return _internal_start_time();
}
inline void IncidentsTile_Metadata::set_start_time(::uint64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.start_time)
}
inline ::uint64_t IncidentsTile_Metadata::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_;
}
inline void IncidentsTile_Metadata::_internal_set_start_time(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_ = value;
}

// uint64 end_time = 7;
inline void IncidentsTile_Metadata::clear_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_time_ = ::uint64_t{0u};
}
inline ::uint64_t IncidentsTile_Metadata::end_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.end_time)
  return _internal_end_time();
}
inline void IncidentsTile_Metadata::set_end_time(::uint64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.end_time)
}
inline ::uint64_t IncidentsTile_Metadata::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_;
}
inline void IncidentsTile_Metadata::_internal_set_end_time(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_time_ = value;
}

// .valhalla.IncidentsTile.Metadata.Impact impact = 9;
inline void IncidentsTile_Metadata::clear_impact() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.impact_ = 0;
}
inline ::valhalla::IncidentsTile_Metadata_Impact IncidentsTile_Metadata::impact() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.impact)
  return _internal_impact();
}
inline void IncidentsTile_Metadata::set_impact(::valhalla::IncidentsTile_Metadata_Impact value) {
  _internal_set_impact(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.impact)
}
inline ::valhalla::IncidentsTile_Metadata_Impact IncidentsTile_Metadata::_internal_impact() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::valhalla::IncidentsTile_Metadata_Impact>(_impl_.impact_);
}
inline void IncidentsTile_Metadata::_internal_set_impact(::valhalla::IncidentsTile_Metadata_Impact value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.impact_ = value;
}

// bool road_closed = 10;
inline void IncidentsTile_Metadata::clear_road_closed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.road_closed_ = false;
}
inline bool IncidentsTile_Metadata::road_closed() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.road_closed)
  return _internal_road_closed();
}
inline void IncidentsTile_Metadata::set_road_closed(bool value) {
  _internal_set_road_closed(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.road_closed)
}
inline bool IncidentsTile_Metadata::_internal_road_closed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.road_closed_;
}
inline void IncidentsTile_Metadata::_internal_set_road_closed(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.road_closed_ = value;
}

// .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
inline bool IncidentsTile_Metadata::has_congestion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.congestion_ != nullptr);
  return value;
}
inline void IncidentsTile_Metadata::clear_congestion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.congestion_ != nullptr) _impl_.congestion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::valhalla::IncidentsTile_Metadata_Congestion& IncidentsTile_Metadata::_internal_congestion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::IncidentsTile_Metadata_Congestion* p = _impl_.congestion_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::IncidentsTile_Metadata_Congestion&>(::valhalla::_IncidentsTile_Metadata_Congestion_default_instance_);
}
inline const ::valhalla::IncidentsTile_Metadata_Congestion& IncidentsTile_Metadata::congestion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.congestion)
  return _internal_congestion();
}
inline void IncidentsTile_Metadata::unsafe_arena_set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.congestion_);
  }
  _impl_.congestion_ = reinterpret_cast<::valhalla::IncidentsTile_Metadata_Congestion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.IncidentsTile.Metadata.congestion)
}
inline ::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::release_congestion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::valhalla::IncidentsTile_Metadata_Congestion* released = _impl_.congestion_;
  _impl_.congestion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::unsafe_arena_release_congestion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.congestion)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::valhalla::IncidentsTile_Metadata_Congestion* temp = _impl_.congestion_;
  _impl_.congestion_ = nullptr;
  return temp;
}
inline ::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::_internal_mutable_congestion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.congestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::IncidentsTile_Metadata_Congestion>(GetArena());
    _impl_.congestion_ = reinterpret_cast<::valhalla::IncidentsTile_Metadata_Congestion*>(p);
  }
  return _impl_.congestion_;
}
inline ::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::mutable_congestion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::IncidentsTile_Metadata_Congestion* _msg = _internal_mutable_congestion();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.congestion)
  return _msg;
}
inline void IncidentsTile_Metadata::set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::valhalla::IncidentsTile_Metadata_Congestion*>(_impl_.congestion_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::valhalla::IncidentsTile_Metadata_Congestion*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.congestion_ = reinterpret_cast<::valhalla::IncidentsTile_Metadata_Congestion*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.congestion)
}

// repeated string lanes_blocked = 12;
inline int IncidentsTile_Metadata::_internal_lanes_blocked_size() const {
  return _internal_lanes_blocked().size();
}
inline int IncidentsTile_Metadata::lanes_blocked_size() const {
  return _internal_lanes_blocked_size();
}
inline void IncidentsTile_Metadata::clear_lanes_blocked() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lanes_blocked_.Clear();
}
inline std::string* IncidentsTile_Metadata::add_lanes_blocked()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_lanes_blocked()->Add();
  // @@protoc_insertion_point(field_add_mutable:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::lanes_blocked(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return _internal_lanes_blocked().Get(index);
}
inline std::string* IncidentsTile_Metadata::mutable_lanes_blocked(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return _internal_mutable_lanes_blocked()->Mutable(index);
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, const std::string& value) {
  _internal_mutable_lanes_blocked()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, std::string&& value) {
  _internal_mutable_lanes_blocked()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_lanes_blocked()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_lanes_blocked()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, absl::string_view value) {
  _internal_mutable_lanes_blocked()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lanes_blocked()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lanes_blocked()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lanes_blocked()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lanes_blocked()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lanes_blocked()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IncidentsTile_Metadata::lanes_blocked() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return _internal_lanes_blocked();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IncidentsTile_Metadata::mutable_lanes_blocked() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.Metadata.lanes_blocked)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lanes_blocked();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IncidentsTile_Metadata::_internal_lanes_blocked() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lanes_blocked_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IncidentsTile_Metadata::_internal_mutable_lanes_blocked() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lanes_blocked_;
}

// uint64 creation_time = 13;
inline void IncidentsTile_Metadata::clear_creation_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.creation_time_ = ::uint64_t{0u};
}
inline ::uint64_t IncidentsTile_Metadata::creation_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.creation_time)
  return _internal_creation_time();
}
inline void IncidentsTile_Metadata::set_creation_time(::uint64_t value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.creation_time)
}
inline ::uint64_t IncidentsTile_Metadata::_internal_creation_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.creation_time_;
}
inline void IncidentsTile_Metadata::_internal_set_creation_time(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.creation_time_ = value;
}

// string long_description = 14;
inline void IncidentsTile_Metadata::clear_long_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.long_description_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::long_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.long_description)
  return _internal_long_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_long_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.long_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.long_description)
}
inline std::string* IncidentsTile_Metadata::mutable_long_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_long_description();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.long_description)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_long_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.long_description_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_long_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.long_description_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_long_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.long_description_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_long_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.long_description)
  return _impl_.long_description_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_long_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.long_description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.long_description_.IsDefault()) {
          _impl_.long_description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.long_description)
}

// string clear_lanes = 15;
inline void IncidentsTile_Metadata::clear_clear_lanes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clear_lanes_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::clear_lanes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.clear_lanes)
  return _internal_clear_lanes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_clear_lanes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.clear_lanes_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.clear_lanes)
}
inline std::string* IncidentsTile_Metadata::mutable_clear_lanes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clear_lanes();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.clear_lanes)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_clear_lanes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clear_lanes_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_clear_lanes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.clear_lanes_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_clear_lanes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.clear_lanes_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_clear_lanes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.clear_lanes)
  return _impl_.clear_lanes_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_clear_lanes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clear_lanes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.clear_lanes_.IsDefault()) {
          _impl_.clear_lanes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.clear_lanes)
}

// uint64 num_lanes_blocked = 16;
inline void IncidentsTile_Metadata::clear_num_lanes_blocked() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_lanes_blocked_ = ::uint64_t{0u};
}
inline ::uint64_t IncidentsTile_Metadata::num_lanes_blocked() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.num_lanes_blocked)
  return _internal_num_lanes_blocked();
}
inline void IncidentsTile_Metadata::set_num_lanes_blocked(::uint64_t value) {
  _internal_set_num_lanes_blocked(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.num_lanes_blocked)
}
inline ::uint64_t IncidentsTile_Metadata::_internal_num_lanes_blocked() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_lanes_blocked_;
}
inline void IncidentsTile_Metadata::_internal_set_num_lanes_blocked(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_lanes_blocked_ = value;
}

// uint32 length = 17;
inline void IncidentsTile_Metadata::clear_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.length_ = 0u;
}
inline ::uint32_t IncidentsTile_Metadata::length() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.length)
  return _internal_length();
}
inline void IncidentsTile_Metadata::set_length(::uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.length)
}
inline ::uint32_t IncidentsTile_Metadata::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void IncidentsTile_Metadata::_internal_set_length(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_ = value;
}

// uint64 id = 128;
inline void IncidentsTile_Metadata::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t IncidentsTile_Metadata::id() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.id)
  return _internal_id();
}
inline void IncidentsTile_Metadata::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.id)
}
inline ::uint64_t IncidentsTile_Metadata::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void IncidentsTile_Metadata::_internal_set_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string iso_3166_1_alpha2 = 129;
inline void IncidentsTile_Metadata::clear_iso_3166_1_alpha2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iso_3166_1_alpha2_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::iso_3166_1_alpha2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return _internal_iso_3166_1_alpha2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_iso_3166_1_alpha2(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_3166_1_alpha2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
inline std::string* IncidentsTile_Metadata::mutable_iso_3166_1_alpha2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_iso_3166_1_alpha2();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_iso_3166_1_alpha2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iso_3166_1_alpha2_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_iso_3166_1_alpha2(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_3166_1_alpha2_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_iso_3166_1_alpha2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.iso_3166_1_alpha2_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_iso_3166_1_alpha2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return _impl_.iso_3166_1_alpha2_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_iso_3166_1_alpha2(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iso_3166_1_alpha2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.iso_3166_1_alpha2_.IsDefault()) {
          _impl_.iso_3166_1_alpha2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}

// string iso_3166_1_alpha3 = 130;
inline void IncidentsTile_Metadata::clear_iso_3166_1_alpha3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iso_3166_1_alpha3_.ClearToEmpty();
}
inline const std::string& IncidentsTile_Metadata::iso_3166_1_alpha3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return _internal_iso_3166_1_alpha3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncidentsTile_Metadata::set_iso_3166_1_alpha3(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_3166_1_alpha3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
inline std::string* IncidentsTile_Metadata::mutable_iso_3166_1_alpha3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_iso_3166_1_alpha3();
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return _s;
}
inline const std::string& IncidentsTile_Metadata::_internal_iso_3166_1_alpha3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iso_3166_1_alpha3_.Get();
}
inline void IncidentsTile_Metadata::_internal_set_iso_3166_1_alpha3(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_3166_1_alpha3_.Set(value, GetArena());
}
inline std::string* IncidentsTile_Metadata::_internal_mutable_iso_3166_1_alpha3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.iso_3166_1_alpha3_.Mutable( GetArena());
}
inline std::string* IncidentsTile_Metadata::release_iso_3166_1_alpha3() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return _impl_.iso_3166_1_alpha3_.Release();
}
inline void IncidentsTile_Metadata::set_allocated_iso_3166_1_alpha3(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iso_3166_1_alpha3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.iso_3166_1_alpha3_.IsDefault()) {
          _impl_.iso_3166_1_alpha3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}

// -------------------------------------------------------------------

// IncidentsTile

// repeated .valhalla.IncidentsTile.Location locations = 1;
inline int IncidentsTile::_internal_locations_size() const {
  return _internal_locations().size();
}
inline int IncidentsTile::locations_size() const {
  return _internal_locations_size();
}
inline void IncidentsTile::clear_locations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locations_.Clear();
}
inline ::valhalla::IncidentsTile_Location* IncidentsTile::mutable_locations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.locations)
  return _internal_mutable_locations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Location>* IncidentsTile::mutable_locations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.locations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_locations();
}
inline const ::valhalla::IncidentsTile_Location& IncidentsTile::locations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.locations)
  return _internal_locations().Get(index);
}
inline ::valhalla::IncidentsTile_Location* IncidentsTile::add_locations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::IncidentsTile_Location* _add = _internal_mutable_locations()->Add();
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.locations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Location>& IncidentsTile::locations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.locations)
  return _internal_locations();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Location>&
IncidentsTile::_internal_locations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.locations_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Location>*
IncidentsTile::_internal_mutable_locations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.locations_;
}

// repeated .valhalla.IncidentsTile.Metadata metadata = 2;
inline int IncidentsTile::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int IncidentsTile::metadata_size() const {
  return _internal_metadata_size();
}
inline void IncidentsTile::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_.Clear();
}
inline ::valhalla::IncidentsTile_Metadata* IncidentsTile::mutable_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Metadata>* IncidentsTile::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.metadata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metadata();
}
inline const ::valhalla::IncidentsTile_Metadata& IncidentsTile::metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.metadata)
  return _internal_metadata().Get(index);
}
inline ::valhalla::IncidentsTile_Metadata* IncidentsTile::add_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::IncidentsTile_Metadata* _add = _internal_mutable_metadata()->Add();
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Metadata>& IncidentsTile::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.metadata)
  return _internal_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Metadata>&
IncidentsTile::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::IncidentsTile_Metadata>*
IncidentsTile::_internal_mutable_metadata() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metadata_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::valhalla::IncidentsTile_Metadata_Type> : std::true_type {};
template <>
struct is_proto_enum<::valhalla::IncidentsTile_Metadata_Impact> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_incidents_2eproto_2epb_2eh
