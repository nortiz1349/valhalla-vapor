// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_status_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_status_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_status_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_status_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {

// ===================================================================


// -------------------------------------------------------------------

class Status final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from)
      : Status(nullptr, from) {}
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Status& default_instance() {
    return *internal_default_instance();
  }
  enum HasHasTilesCase {
    kHasTiles = 1,
    HAS_HAS_TILES_NOT_SET = 0,
  };

  enum HasHasAdminsCase {
    kHasAdmins = 2,
    HAS_HAS_ADMINS_NOT_SET = 0,
  };

  enum HasHasTimezonesCase {
    kHasTimezones = 3,
    HAS_HAS_TIMEZONES_NOT_SET = 0,
  };

  enum HasHasLiveTrafficCase {
    kHasLiveTraffic = 4,
    HAS_HAS_LIVE_TRAFFIC_NOT_SET = 0,
  };

  enum HasBboxCase {
    kBbox = 5,
    HAS_BBOX_NOT_SET = 0,
  };

  enum HasHasTransitTilesCase {
    kHasTransitTiles = 9,
    HAS_HAS_TRANSIT_TILES_NOT_SET = 0,
  };

  enum HasOsmChangesetCase {
    kOsmChangeset = 10,
    HAS_OSM_CHANGESET_NOT_SET = 0,
  };

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Status* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Status";
  }
  protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableActionsFieldNumber = 8,
    kVersionFieldNumber = 6,
    kTilesetLastModifiedFieldNumber = 7,
    kHasTilesFieldNumber = 1,
    kHasAdminsFieldNumber = 2,
    kHasTimezonesFieldNumber = 3,
    kHasLiveTrafficFieldNumber = 4,
    kBboxFieldNumber = 5,
    kHasTransitTilesFieldNumber = 9,
    kOsmChangesetFieldNumber = 10,
  };
  // repeated string available_actions = 8;
  int available_actions_size() const;
  private:
  int _internal_available_actions_size() const;

  public:
  void clear_available_actions() ;
  const std::string& available_actions(int index) const;
  std::string* mutable_available_actions(int index);
  void set_available_actions(int index, const std::string& value);
  void set_available_actions(int index, std::string&& value);
  void set_available_actions(int index, const char* value);
  void set_available_actions(int index, const char* value, std::size_t size);
  void set_available_actions(int index, absl::string_view value);
  std::string* add_available_actions();
  void add_available_actions(const std::string& value);
  void add_available_actions(std::string&& value);
  void add_available_actions(const char* value);
  void add_available_actions(const char* value, std::size_t size);
  void add_available_actions(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& available_actions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_available_actions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_available_actions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_available_actions();

  public:
  // string version = 6;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // uint32 tileset_last_modified = 7;
  void clear_tileset_last_modified() ;
  ::uint32_t tileset_last_modified() const;
  void set_tileset_last_modified(::uint32_t value);

  private:
  ::uint32_t _internal_tileset_last_modified() const;
  void _internal_set_tileset_last_modified(::uint32_t value);

  public:
  // bool has_tiles = 1;
  bool has_has_tiles() const;
  void clear_has_tiles() ;
  bool has_tiles() const;
  void set_has_tiles(bool value);

  private:
  bool _internal_has_tiles() const;
  void _internal_set_has_tiles(bool value);

  public:
  // bool has_admins = 2;
  bool has_has_admins() const;
  void clear_has_admins() ;
  bool has_admins() const;
  void set_has_admins(bool value);

  private:
  bool _internal_has_admins() const;
  void _internal_set_has_admins(bool value);

  public:
  // bool has_timezones = 3;
  bool has_has_timezones() const;
  void clear_has_timezones() ;
  bool has_timezones() const;
  void set_has_timezones(bool value);

  private:
  bool _internal_has_timezones() const;
  void _internal_set_has_timezones(bool value);

  public:
  // bool has_live_traffic = 4;
  bool has_has_live_traffic() const;
  void clear_has_live_traffic() ;
  bool has_live_traffic() const;
  void set_has_live_traffic(bool value);

  private:
  bool _internal_has_live_traffic() const;
  void _internal_set_has_live_traffic(bool value);

  public:
  // string bbox = 5;
  bool has_bbox() const;
  void clear_bbox() ;
  const std::string& bbox() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bbox(Arg_&& arg, Args_... args);
  std::string* mutable_bbox();
  PROTOBUF_NODISCARD std::string* release_bbox();
  void set_allocated_bbox(std::string* value);

  private:
  const std::string& _internal_bbox() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bbox(
      const std::string& value);
  std::string* _internal_mutable_bbox();

  public:
  // bool has_transit_tiles = 9;
  bool has_has_transit_tiles() const;
  void clear_has_transit_tiles() ;
  bool has_transit_tiles() const;
  void set_has_transit_tiles(bool value);

  private:
  bool _internal_has_transit_tiles() const;
  void _internal_set_has_transit_tiles(bool value);

  public:
  // uint64 osm_changeset = 10;
  bool has_osm_changeset() const;
  void clear_osm_changeset() ;
  ::uint64_t osm_changeset() const;
  void set_osm_changeset(::uint64_t value);

  private:
  ::uint64_t _internal_osm_changeset() const;
  void _internal_set_osm_changeset(::uint64_t value);

  public:
  void clear_has_has_tiles();
  HasHasTilesCase has_has_tiles_case() const;
  void clear_has_has_admins();
  HasHasAdminsCase has_has_admins_case() const;
  void clear_has_has_timezones();
  HasHasTimezonesCase has_has_timezones_case() const;
  void clear_has_has_live_traffic();
  HasHasLiveTrafficCase has_has_live_traffic_case() const;
  void clear_has_bbox();
  HasBboxCase has_bbox_case() const;
  void clear_has_has_transit_tiles();
  HasHasTransitTilesCase has_has_transit_tiles_case() const;
  void clear_has_osm_changeset();
  HasOsmChangesetCase has_osm_changeset_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Status)
 private:
  class _Internal;
  void set_has_has_tiles();
  void set_has_has_admins();
  void set_has_has_timezones();
  void set_has_has_live_traffic();
  void set_has_bbox();
  void set_has_has_transit_tiles();
  void set_has_osm_changeset();

  inline bool has_has_has_tiles() const;
  inline void clear_has_has_has_tiles();

  inline bool has_has_has_admins() const;
  inline void clear_has_has_has_admins();

  inline bool has_has_has_timezones() const;
  inline void clear_has_has_has_timezones();

  inline bool has_has_has_live_traffic() const;
  inline void clear_has_has_has_live_traffic();

  inline bool has_has_bbox() const;
  inline void clear_has_has_bbox();

  inline bool has_has_has_transit_tiles() const;
  inline void clear_has_has_has_transit_tiles();

  inline bool has_has_osm_changeset() const;
  inline void clear_has_has_osm_changeset();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 10, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> available_actions_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::uint32_t tileset_last_modified_;
    union HasHasTilesUnion {
      constexpr HasHasTilesUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool has_tiles_;
    } has_has_tiles_;
    union HasHasAdminsUnion {
      constexpr HasHasAdminsUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool has_admins_;
    } has_has_admins_;
    union HasHasTimezonesUnion {
      constexpr HasHasTimezonesUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool has_timezones_;
    } has_has_timezones_;
    union HasHasLiveTrafficUnion {
      constexpr HasHasLiveTrafficUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool has_live_traffic_;
    } has_has_live_traffic_;
    union HasBboxUnion {
      constexpr HasBboxUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr bbox_;
    } has_bbox_;
    union HasHasTransitTilesUnion {
      constexpr HasHasTransitTilesUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool has_transit_tiles_;
    } has_has_transit_tiles_;
    union HasOsmChangesetUnion {
      constexpr HasOsmChangesetUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint64_t osm_changeset_;
    } has_osm_changeset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[7];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_status_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Status

// bool has_tiles = 1;
inline bool Status::has_has_tiles() const {
  return has_has_tiles_case() == kHasTiles;
}
inline void Status::set_has_has_tiles() {
  _impl_._oneof_case_[0] = kHasTiles;
}
inline void Status::clear_has_tiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_has_tiles_case() == kHasTiles) {
    _impl_.has_has_tiles_.has_tiles_ = false;
    clear_has_has_has_tiles();
  }
}
inline bool Status::has_tiles() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.has_tiles)
  return _internal_has_tiles();
}
inline void Status::set_has_tiles(bool value) {
  _internal_set_has_tiles(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.has_tiles)
}
inline bool Status::_internal_has_tiles() const {
  if (has_has_tiles_case() == kHasTiles) {
    return _impl_.has_has_tiles_.has_tiles_;
  }
  return false;
}
inline void Status::_internal_set_has_tiles(bool value) {
  if (has_has_tiles_case() != kHasTiles) {
    clear_has_has_tiles();
    set_has_has_tiles();
  }
  _impl_.has_has_tiles_.has_tiles_ = value;
}

// bool has_admins = 2;
inline bool Status::has_has_admins() const {
  return has_has_admins_case() == kHasAdmins;
}
inline void Status::set_has_has_admins() {
  _impl_._oneof_case_[1] = kHasAdmins;
}
inline void Status::clear_has_admins() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_has_admins_case() == kHasAdmins) {
    _impl_.has_has_admins_.has_admins_ = false;
    clear_has_has_has_admins();
  }
}
inline bool Status::has_admins() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.has_admins)
  return _internal_has_admins();
}
inline void Status::set_has_admins(bool value) {
  _internal_set_has_admins(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.has_admins)
}
inline bool Status::_internal_has_admins() const {
  if (has_has_admins_case() == kHasAdmins) {
    return _impl_.has_has_admins_.has_admins_;
  }
  return false;
}
inline void Status::_internal_set_has_admins(bool value) {
  if (has_has_admins_case() != kHasAdmins) {
    clear_has_has_admins();
    set_has_has_admins();
  }
  _impl_.has_has_admins_.has_admins_ = value;
}

// bool has_timezones = 3;
inline bool Status::has_has_timezones() const {
  return has_has_timezones_case() == kHasTimezones;
}
inline void Status::set_has_has_timezones() {
  _impl_._oneof_case_[2] = kHasTimezones;
}
inline void Status::clear_has_timezones() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_has_timezones_case() == kHasTimezones) {
    _impl_.has_has_timezones_.has_timezones_ = false;
    clear_has_has_has_timezones();
  }
}
inline bool Status::has_timezones() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.has_timezones)
  return _internal_has_timezones();
}
inline void Status::set_has_timezones(bool value) {
  _internal_set_has_timezones(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.has_timezones)
}
inline bool Status::_internal_has_timezones() const {
  if (has_has_timezones_case() == kHasTimezones) {
    return _impl_.has_has_timezones_.has_timezones_;
  }
  return false;
}
inline void Status::_internal_set_has_timezones(bool value) {
  if (has_has_timezones_case() != kHasTimezones) {
    clear_has_has_timezones();
    set_has_has_timezones();
  }
  _impl_.has_has_timezones_.has_timezones_ = value;
}

// bool has_live_traffic = 4;
inline bool Status::has_has_live_traffic() const {
  return has_has_live_traffic_case() == kHasLiveTraffic;
}
inline void Status::set_has_has_live_traffic() {
  _impl_._oneof_case_[3] = kHasLiveTraffic;
}
inline void Status::clear_has_live_traffic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_has_live_traffic_case() == kHasLiveTraffic) {
    _impl_.has_has_live_traffic_.has_live_traffic_ = false;
    clear_has_has_has_live_traffic();
  }
}
inline bool Status::has_live_traffic() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.has_live_traffic)
  return _internal_has_live_traffic();
}
inline void Status::set_has_live_traffic(bool value) {
  _internal_set_has_live_traffic(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.has_live_traffic)
}
inline bool Status::_internal_has_live_traffic() const {
  if (has_has_live_traffic_case() == kHasLiveTraffic) {
    return _impl_.has_has_live_traffic_.has_live_traffic_;
  }
  return false;
}
inline void Status::_internal_set_has_live_traffic(bool value) {
  if (has_has_live_traffic_case() != kHasLiveTraffic) {
    clear_has_has_live_traffic();
    set_has_has_live_traffic();
  }
  _impl_.has_has_live_traffic_.has_live_traffic_ = value;
}

// string bbox = 5;
inline bool Status::has_bbox() const {
  return has_bbox_case() == kBbox;
}
inline void Status::set_has_bbox() {
  _impl_._oneof_case_[4] = kBbox;
}
inline void Status::clear_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_bbox_case() == kBbox) {
    _impl_.has_bbox_.bbox_.Destroy();
    clear_has_has_bbox();
  }
}
inline const std::string& Status::bbox() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Status.bbox)
  return _internal_bbox();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_bbox(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_bbox_case() != kBbox) {
    clear_has_bbox();

    set_has_bbox();
    _impl_.has_bbox_.bbox_.InitDefault();
  }
  _impl_.has_bbox_.bbox_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.Status.bbox)
}
inline std::string* Status::mutable_bbox() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:valhalla.Status.bbox)
  return _s;
}
inline const std::string& Status::_internal_bbox() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (has_bbox_case() != kBbox) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.has_bbox_.bbox_.Get();
}
inline void Status::_internal_set_bbox(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_bbox_case() != kBbox) {
    clear_has_bbox();

    set_has_bbox();
    _impl_.has_bbox_.bbox_.InitDefault();
  }
  _impl_.has_bbox_.bbox_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_bbox_case() != kBbox) {
    clear_has_bbox();

    set_has_bbox();
    _impl_.has_bbox_.bbox_.InitDefault();
  }
  return _impl_.has_bbox_.bbox_.Mutable( GetArena());
}
inline std::string* Status::release_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Status.bbox)
  if (has_bbox_case() != kBbox) {
    return nullptr;
  }
  clear_has_has_bbox();
  return _impl_.has_bbox_.bbox_.Release();
}
inline void Status::set_allocated_bbox(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_has_bbox()) {
    clear_has_bbox();
  }
  if (value != nullptr) {
    set_has_bbox();
    _impl_.has_bbox_.bbox_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Status.bbox)
}

// string version = 6;
inline void Status::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Status::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Status.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:valhalla.Status.version)
}
inline std::string* Status::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:valhalla.Status.version)
  return _s;
}
inline const std::string& Status::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void Status::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* Status::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Status.version)
  return _impl_.version_.Release();
}
inline void Status::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.Status.version)
}

// uint32 tileset_last_modified = 7;
inline void Status::clear_tileset_last_modified() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tileset_last_modified_ = 0u;
}
inline ::uint32_t Status::tileset_last_modified() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.tileset_last_modified)
  return _internal_tileset_last_modified();
}
inline void Status::set_tileset_last_modified(::uint32_t value) {
  _internal_set_tileset_last_modified(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.tileset_last_modified)
}
inline ::uint32_t Status::_internal_tileset_last_modified() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tileset_last_modified_;
}
inline void Status::_internal_set_tileset_last_modified(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tileset_last_modified_ = value;
}

// repeated string available_actions = 8;
inline int Status::_internal_available_actions_size() const {
  return _internal_available_actions().size();
}
inline int Status::available_actions_size() const {
  return _internal_available_actions_size();
}
inline void Status::clear_available_actions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.available_actions_.Clear();
}
inline std::string* Status::add_available_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_available_actions()->Add();
  // @@protoc_insertion_point(field_add_mutable:valhalla.Status.available_actions)
  return _s;
}
inline const std::string& Status::available_actions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Status.available_actions)
  return _internal_available_actions().Get(index);
}
inline std::string* Status::mutable_available_actions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Status.available_actions)
  return _internal_mutable_available_actions()->Mutable(index);
}
inline void Status::set_available_actions(int index, const std::string& value) {
  _internal_mutable_available_actions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.available_actions)
}
inline void Status::set_available_actions(int index, std::string&& value) {
  _internal_mutable_available_actions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.Status.available_actions)
}
inline void Status::set_available_actions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_available_actions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Status.available_actions)
}
inline void Status::set_available_actions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_available_actions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Status.available_actions)
}
inline void Status::set_available_actions(int index, absl::string_view value) {
  _internal_mutable_available_actions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:valhalla.Status.available_actions)
}
inline void Status::add_available_actions(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_available_actions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Status.available_actions)
}
inline void Status::add_available_actions(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_available_actions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Status.available_actions)
}
inline void Status::add_available_actions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_available_actions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Status.available_actions)
}
inline void Status::add_available_actions(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_available_actions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Status.available_actions)
}
inline void Status::add_available_actions(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_available_actions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:valhalla.Status.available_actions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Status::available_actions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Status.available_actions)
  return _internal_available_actions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Status::mutable_available_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Status.available_actions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_available_actions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Status::_internal_available_actions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.available_actions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Status::_internal_mutable_available_actions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.available_actions_;
}

// bool has_transit_tiles = 9;
inline bool Status::has_has_transit_tiles() const {
  return has_has_transit_tiles_case() == kHasTransitTiles;
}
inline void Status::set_has_has_transit_tiles() {
  _impl_._oneof_case_[5] = kHasTransitTiles;
}
inline void Status::clear_has_transit_tiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_has_transit_tiles_case() == kHasTransitTiles) {
    _impl_.has_has_transit_tiles_.has_transit_tiles_ = false;
    clear_has_has_has_transit_tiles();
  }
}
inline bool Status::has_transit_tiles() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.has_transit_tiles)
  return _internal_has_transit_tiles();
}
inline void Status::set_has_transit_tiles(bool value) {
  _internal_set_has_transit_tiles(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.has_transit_tiles)
}
inline bool Status::_internal_has_transit_tiles() const {
  if (has_has_transit_tiles_case() == kHasTransitTiles) {
    return _impl_.has_has_transit_tiles_.has_transit_tiles_;
  }
  return false;
}
inline void Status::_internal_set_has_transit_tiles(bool value) {
  if (has_has_transit_tiles_case() != kHasTransitTiles) {
    clear_has_has_transit_tiles();
    set_has_has_transit_tiles();
  }
  _impl_.has_has_transit_tiles_.has_transit_tiles_ = value;
}

// uint64 osm_changeset = 10;
inline bool Status::has_osm_changeset() const {
  return has_osm_changeset_case() == kOsmChangeset;
}
inline void Status::set_has_osm_changeset() {
  _impl_._oneof_case_[6] = kOsmChangeset;
}
inline void Status::clear_osm_changeset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_osm_changeset_case() == kOsmChangeset) {
    _impl_.has_osm_changeset_.osm_changeset_ = ::uint64_t{0u};
    clear_has_has_osm_changeset();
  }
}
inline ::uint64_t Status::osm_changeset() const {
  // @@protoc_insertion_point(field_get:valhalla.Status.osm_changeset)
  return _internal_osm_changeset();
}
inline void Status::set_osm_changeset(::uint64_t value) {
  _internal_set_osm_changeset(value);
  // @@protoc_insertion_point(field_set:valhalla.Status.osm_changeset)
}
inline ::uint64_t Status::_internal_osm_changeset() const {
  if (has_osm_changeset_case() == kOsmChangeset) {
    return _impl_.has_osm_changeset_.osm_changeset_;
  }
  return ::uint64_t{0u};
}
inline void Status::_internal_set_osm_changeset(::uint64_t value) {
  if (has_osm_changeset_case() != kOsmChangeset) {
    clear_has_osm_changeset();
    set_has_osm_changeset();
  }
  _impl_.has_osm_changeset_.osm_changeset_ = value;
}

inline bool Status::has_has_has_tiles() const {
  return has_has_tiles_case() != HAS_HAS_TILES_NOT_SET;
}
inline void Status::clear_has_has_has_tiles() {
  _impl_._oneof_case_[0] = HAS_HAS_TILES_NOT_SET;
}
inline bool Status::has_has_has_admins() const {
  return has_has_admins_case() != HAS_HAS_ADMINS_NOT_SET;
}
inline void Status::clear_has_has_has_admins() {
  _impl_._oneof_case_[1] = HAS_HAS_ADMINS_NOT_SET;
}
inline bool Status::has_has_has_timezones() const {
  return has_has_timezones_case() != HAS_HAS_TIMEZONES_NOT_SET;
}
inline void Status::clear_has_has_has_timezones() {
  _impl_._oneof_case_[2] = HAS_HAS_TIMEZONES_NOT_SET;
}
inline bool Status::has_has_has_live_traffic() const {
  return has_has_live_traffic_case() != HAS_HAS_LIVE_TRAFFIC_NOT_SET;
}
inline void Status::clear_has_has_has_live_traffic() {
  _impl_._oneof_case_[3] = HAS_HAS_LIVE_TRAFFIC_NOT_SET;
}
inline bool Status::has_has_bbox() const {
  return has_bbox_case() != HAS_BBOX_NOT_SET;
}
inline void Status::clear_has_has_bbox() {
  _impl_._oneof_case_[4] = HAS_BBOX_NOT_SET;
}
inline bool Status::has_has_has_transit_tiles() const {
  return has_has_transit_tiles_case() != HAS_HAS_TRANSIT_TILES_NOT_SET;
}
inline void Status::clear_has_has_has_transit_tiles() {
  _impl_._oneof_case_[5] = HAS_HAS_TRANSIT_TILES_NOT_SET;
}
inline bool Status::has_has_osm_changeset() const {
  return has_osm_changeset_case() != HAS_OSM_CHANGESET_NOT_SET;
}
inline void Status::clear_has_has_osm_changeset() {
  _impl_._oneof_case_[6] = HAS_OSM_CHANGESET_NOT_SET;
}
inline Status::HasHasTilesCase Status::has_has_tiles_case() const {
  return Status::HasHasTilesCase(_impl_._oneof_case_[0]);
}
inline Status::HasHasAdminsCase Status::has_has_admins_case() const {
  return Status::HasHasAdminsCase(_impl_._oneof_case_[1]);
}
inline Status::HasHasTimezonesCase Status::has_has_timezones_case() const {
  return Status::HasHasTimezonesCase(_impl_._oneof_case_[2]);
}
inline Status::HasHasLiveTrafficCase Status::has_has_live_traffic_case() const {
  return Status::HasHasLiveTrafficCase(_impl_._oneof_case_[3]);
}
inline Status::HasBboxCase Status::has_bbox_case() const {
  return Status::HasBboxCase(_impl_._oneof_case_[4]);
}
inline Status::HasHasTransitTilesCase Status::has_has_transit_tiles_case() const {
  return Status::HasHasTransitTilesCase(_impl_._oneof_case_[5]);
}
inline Status::HasOsmChangesetCase Status::has_osm_changeset_case() const {
  return Status::HasOsmChangesetCase(_impl_._oneof_case_[6]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_status_2eproto_2epb_2eh
