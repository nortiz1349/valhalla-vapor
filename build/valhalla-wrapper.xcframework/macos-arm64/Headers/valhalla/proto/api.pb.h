// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "options.pb.h"
#include "trip.pb.h"
#include "directions.pb.h"
#include "info.pb.h"
#include "status.pb.h"
#include "matrix.pb.h"
#include "isochrone.pb.h"
#include "expansion.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class Api;
struct ApiDefaultTypeInternal;
extern ApiDefaultTypeInternal _Api_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {

// ===================================================================


// -------------------------------------------------------------------

class Api final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Api) */ {
 public:
  inline Api() : Api(nullptr) {}
  ~Api() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Api(::google::protobuf::internal::ConstantInitialized);

  inline Api(const Api& from)
      : Api(nullptr, from) {}
  Api(Api&& from) noexcept
    : Api() {
    *this = ::std::move(from);
  }

  inline Api& operator=(const Api& from) {
    CopyFrom(from);
    return *this;
  }
  inline Api& operator=(Api&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Api& default_instance() {
    return *internal_default_instance();
  }
  static inline const Api* internal_default_instance() {
    return reinterpret_cast<const Api*>(
               &_Api_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Api& a, Api& b) {
    a.Swap(&b);
  }
  inline void Swap(Api* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Api* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Api* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Api>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Api& from);
  void MergeFrom(const Api& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Api* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Api";
  }
  protected:
  explicit Api(::google::protobuf::Arena* arena);
  Api(::google::protobuf::Arena* arena, const Api& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kTripFieldNumber = 2,
    kDirectionsFieldNumber = 3,
    kStatusFieldNumber = 4,
    kMatrixFieldNumber = 5,
    kIsochroneFieldNumber = 6,
    kExpansionFieldNumber = 7,
    kInfoFieldNumber = 20,
  };
  // .valhalla.Options options = 1;
  bool has_options() const;
  void clear_options() ;
  const ::valhalla::Options& options() const;
  PROTOBUF_NODISCARD ::valhalla::Options* release_options();
  ::valhalla::Options* mutable_options();
  void set_allocated_options(::valhalla::Options* value);
  void unsafe_arena_set_allocated_options(::valhalla::Options* value);
  ::valhalla::Options* unsafe_arena_release_options();

  private:
  const ::valhalla::Options& _internal_options() const;
  ::valhalla::Options* _internal_mutable_options();

  public:
  // .valhalla.Trip trip = 2;
  bool has_trip() const;
  void clear_trip() ;
  const ::valhalla::Trip& trip() const;
  PROTOBUF_NODISCARD ::valhalla::Trip* release_trip();
  ::valhalla::Trip* mutable_trip();
  void set_allocated_trip(::valhalla::Trip* value);
  void unsafe_arena_set_allocated_trip(::valhalla::Trip* value);
  ::valhalla::Trip* unsafe_arena_release_trip();

  private:
  const ::valhalla::Trip& _internal_trip() const;
  ::valhalla::Trip* _internal_mutable_trip();

  public:
  // .valhalla.Directions directions = 3;
  bool has_directions() const;
  void clear_directions() ;
  const ::valhalla::Directions& directions() const;
  PROTOBUF_NODISCARD ::valhalla::Directions* release_directions();
  ::valhalla::Directions* mutable_directions();
  void set_allocated_directions(::valhalla::Directions* value);
  void unsafe_arena_set_allocated_directions(::valhalla::Directions* value);
  ::valhalla::Directions* unsafe_arena_release_directions();

  private:
  const ::valhalla::Directions& _internal_directions() const;
  ::valhalla::Directions* _internal_mutable_directions();

  public:
  // .valhalla.Status status = 4;
  bool has_status() const;
  void clear_status() ;
  const ::valhalla::Status& status() const;
  PROTOBUF_NODISCARD ::valhalla::Status* release_status();
  ::valhalla::Status* mutable_status();
  void set_allocated_status(::valhalla::Status* value);
  void unsafe_arena_set_allocated_status(::valhalla::Status* value);
  ::valhalla::Status* unsafe_arena_release_status();

  private:
  const ::valhalla::Status& _internal_status() const;
  ::valhalla::Status* _internal_mutable_status();

  public:
  // .valhalla.Matrix matrix = 5;
  bool has_matrix() const;
  void clear_matrix() ;
  const ::valhalla::Matrix& matrix() const;
  PROTOBUF_NODISCARD ::valhalla::Matrix* release_matrix();
  ::valhalla::Matrix* mutable_matrix();
  void set_allocated_matrix(::valhalla::Matrix* value);
  void unsafe_arena_set_allocated_matrix(::valhalla::Matrix* value);
  ::valhalla::Matrix* unsafe_arena_release_matrix();

  private:
  const ::valhalla::Matrix& _internal_matrix() const;
  ::valhalla::Matrix* _internal_mutable_matrix();

  public:
  // .valhalla.Isochrone isochrone = 6;
  bool has_isochrone() const;
  void clear_isochrone() ;
  const ::valhalla::Isochrone& isochrone() const;
  PROTOBUF_NODISCARD ::valhalla::Isochrone* release_isochrone();
  ::valhalla::Isochrone* mutable_isochrone();
  void set_allocated_isochrone(::valhalla::Isochrone* value);
  void unsafe_arena_set_allocated_isochrone(::valhalla::Isochrone* value);
  ::valhalla::Isochrone* unsafe_arena_release_isochrone();

  private:
  const ::valhalla::Isochrone& _internal_isochrone() const;
  ::valhalla::Isochrone* _internal_mutable_isochrone();

  public:
  // .valhalla.Expansion expansion = 7;
  bool has_expansion() const;
  void clear_expansion() ;
  const ::valhalla::Expansion& expansion() const;
  PROTOBUF_NODISCARD ::valhalla::Expansion* release_expansion();
  ::valhalla::Expansion* mutable_expansion();
  void set_allocated_expansion(::valhalla::Expansion* value);
  void unsafe_arena_set_allocated_expansion(::valhalla::Expansion* value);
  ::valhalla::Expansion* unsafe_arena_release_expansion();

  private:
  const ::valhalla::Expansion& _internal_expansion() const;
  ::valhalla::Expansion* _internal_mutable_expansion();

  public:
  // .valhalla.Info info = 20;
  bool has_info() const;
  void clear_info() ;
  const ::valhalla::Info& info() const;
  PROTOBUF_NODISCARD ::valhalla::Info* release_info();
  ::valhalla::Info* mutable_info();
  void set_allocated_info(::valhalla::Info* value);
  void unsafe_arena_set_allocated_info(::valhalla::Info* value);
  ::valhalla::Info* unsafe_arena_release_info();

  private:
  const ::valhalla::Info& _internal_info() const;
  ::valhalla::Info* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:valhalla.Api)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 8,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::valhalla::Options* options_;
    ::valhalla::Trip* trip_;
    ::valhalla::Directions* directions_;
    ::valhalla::Status* status_;
    ::valhalla::Matrix* matrix_;
    ::valhalla::Isochrone* isochrone_;
    ::valhalla::Expansion* expansion_;
    ::valhalla::Info* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Api

// .valhalla.Options options = 1;
inline bool Api::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline const ::valhalla::Options& Api::_internal_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Options* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Options&>(::valhalla::_Options_default_instance_);
}
inline const ::valhalla::Options& Api::options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.options)
  return _internal_options();
}
inline void Api::unsafe_arena_set_allocated_options(::valhalla::Options* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = reinterpret_cast<::valhalla::Options*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.options)
}
inline ::valhalla::Options* Api::release_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::valhalla::Options* released = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Options* Api::unsafe_arena_release_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::valhalla::Options* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::valhalla::Options* Api::_internal_mutable_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Options>(GetArena());
    _impl_.options_ = reinterpret_cast<::valhalla::Options*>(p);
  }
  return _impl_.options_;
}
inline ::valhalla::Options* Api::mutable_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Options* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.options)
  return _msg;
}
inline void Api::set_allocated_options(::valhalla::Options* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.options_ = reinterpret_cast<::valhalla::Options*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.options)
}

// .valhalla.Trip trip = 2;
inline bool Api::has_trip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trip_ != nullptr);
  return value;
}
inline const ::valhalla::Trip& Api::_internal_trip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Trip* p = _impl_.trip_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Trip&>(::valhalla::_Trip_default_instance_);
}
inline const ::valhalla::Trip& Api::trip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.trip)
  return _internal_trip();
}
inline void Api::unsafe_arena_set_allocated_trip(::valhalla::Trip* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trip_);
  }
  _impl_.trip_ = reinterpret_cast<::valhalla::Trip*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.trip)
}
inline ::valhalla::Trip* Api::release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::valhalla::Trip* released = _impl_.trip_;
  _impl_.trip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Trip* Api::unsafe_arena_release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.trip)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::valhalla::Trip* temp = _impl_.trip_;
  _impl_.trip_ = nullptr;
  return temp;
}
inline ::valhalla::Trip* Api::_internal_mutable_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.trip_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Trip>(GetArena());
    _impl_.trip_ = reinterpret_cast<::valhalla::Trip*>(p);
  }
  return _impl_.trip_;
}
inline ::valhalla::Trip* Api::mutable_trip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Trip* _msg = _internal_mutable_trip();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.trip)
  return _msg;
}
inline void Api::set_allocated_trip(::valhalla::Trip* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.trip_ = reinterpret_cast<::valhalla::Trip*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.trip)
}

// .valhalla.Directions directions = 3;
inline bool Api::has_directions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.directions_ != nullptr);
  return value;
}
inline const ::valhalla::Directions& Api::_internal_directions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Directions* p = _impl_.directions_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Directions&>(::valhalla::_Directions_default_instance_);
}
inline const ::valhalla::Directions& Api::directions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.directions)
  return _internal_directions();
}
inline void Api::unsafe_arena_set_allocated_directions(::valhalla::Directions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.directions_);
  }
  _impl_.directions_ = reinterpret_cast<::valhalla::Directions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.directions)
}
inline ::valhalla::Directions* Api::release_directions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::valhalla::Directions* released = _impl_.directions_;
  _impl_.directions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Directions* Api::unsafe_arena_release_directions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.directions)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::valhalla::Directions* temp = _impl_.directions_;
  _impl_.directions_ = nullptr;
  return temp;
}
inline ::valhalla::Directions* Api::_internal_mutable_directions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.directions_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Directions>(GetArena());
    _impl_.directions_ = reinterpret_cast<::valhalla::Directions*>(p);
  }
  return _impl_.directions_;
}
inline ::valhalla::Directions* Api::mutable_directions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Directions* _msg = _internal_mutable_directions();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.directions)
  return _msg;
}
inline void Api::set_allocated_directions(::valhalla::Directions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.directions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.directions_ = reinterpret_cast<::valhalla::Directions*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.directions)
}

// .valhalla.Status status = 4;
inline bool Api::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_ != nullptr);
  return value;
}
inline const ::valhalla::Status& Api::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Status&>(::valhalla::_Status_default_instance_);
}
inline const ::valhalla::Status& Api::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.status)
  return _internal_status();
}
inline void Api::unsafe_arena_set_allocated_status(::valhalla::Status* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = reinterpret_cast<::valhalla::Status*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.status)
}
inline ::valhalla::Status* Api::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::valhalla::Status* released = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Status* Api::unsafe_arena_release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.status)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::valhalla::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::valhalla::Status* Api::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Status>(GetArena());
    _impl_.status_ = reinterpret_cast<::valhalla::Status*>(p);
  }
  return _impl_.status_;
}
inline ::valhalla::Status* Api::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.status)
  return _msg;
}
inline void Api::set_allocated_status(::valhalla::Status* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.status_ = reinterpret_cast<::valhalla::Status*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.status)
}

// .valhalla.Matrix matrix = 5;
inline bool Api::has_matrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matrix_ != nullptr);
  return value;
}
inline const ::valhalla::Matrix& Api::_internal_matrix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Matrix* p = _impl_.matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Matrix&>(::valhalla::_Matrix_default_instance_);
}
inline const ::valhalla::Matrix& Api::matrix() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.matrix)
  return _internal_matrix();
}
inline void Api::unsafe_arena_set_allocated_matrix(::valhalla::Matrix* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.matrix_);
  }
  _impl_.matrix_ = reinterpret_cast<::valhalla::Matrix*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.matrix)
}
inline ::valhalla::Matrix* Api::release_matrix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::valhalla::Matrix* released = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Matrix* Api::unsafe_arena_release_matrix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.matrix)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::valhalla::Matrix* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
  return temp;
}
inline ::valhalla::Matrix* Api::_internal_mutable_matrix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Matrix>(GetArena());
    _impl_.matrix_ = reinterpret_cast<::valhalla::Matrix*>(p);
  }
  return _impl_.matrix_;
}
inline ::valhalla::Matrix* Api::mutable_matrix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Matrix* _msg = _internal_mutable_matrix();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.matrix)
  return _msg;
}
inline void Api::set_allocated_matrix(::valhalla::Matrix* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.matrix_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.matrix_ = reinterpret_cast<::valhalla::Matrix*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.matrix)
}

// .valhalla.Isochrone isochrone = 6;
inline bool Api::has_isochrone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.isochrone_ != nullptr);
  return value;
}
inline const ::valhalla::Isochrone& Api::_internal_isochrone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Isochrone* p = _impl_.isochrone_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Isochrone&>(::valhalla::_Isochrone_default_instance_);
}
inline const ::valhalla::Isochrone& Api::isochrone() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.isochrone)
  return _internal_isochrone();
}
inline void Api::unsafe_arena_set_allocated_isochrone(::valhalla::Isochrone* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.isochrone_);
  }
  _impl_.isochrone_ = reinterpret_cast<::valhalla::Isochrone*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.isochrone)
}
inline ::valhalla::Isochrone* Api::release_isochrone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::valhalla::Isochrone* released = _impl_.isochrone_;
  _impl_.isochrone_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Isochrone* Api::unsafe_arena_release_isochrone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.isochrone)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::valhalla::Isochrone* temp = _impl_.isochrone_;
  _impl_.isochrone_ = nullptr;
  return temp;
}
inline ::valhalla::Isochrone* Api::_internal_mutable_isochrone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.isochrone_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Isochrone>(GetArena());
    _impl_.isochrone_ = reinterpret_cast<::valhalla::Isochrone*>(p);
  }
  return _impl_.isochrone_;
}
inline ::valhalla::Isochrone* Api::mutable_isochrone() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Isochrone* _msg = _internal_mutable_isochrone();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.isochrone)
  return _msg;
}
inline void Api::set_allocated_isochrone(::valhalla::Isochrone* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.isochrone_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.isochrone_ = reinterpret_cast<::valhalla::Isochrone*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.isochrone)
}

// .valhalla.Expansion expansion = 7;
inline bool Api::has_expansion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expansion_ != nullptr);
  return value;
}
inline const ::valhalla::Expansion& Api::_internal_expansion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Expansion* p = _impl_.expansion_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Expansion&>(::valhalla::_Expansion_default_instance_);
}
inline const ::valhalla::Expansion& Api::expansion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.expansion)
  return _internal_expansion();
}
inline void Api::unsafe_arena_set_allocated_expansion(::valhalla::Expansion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expansion_);
  }
  _impl_.expansion_ = reinterpret_cast<::valhalla::Expansion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.expansion)
}
inline ::valhalla::Expansion* Api::release_expansion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::valhalla::Expansion* released = _impl_.expansion_;
  _impl_.expansion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Expansion* Api::unsafe_arena_release_expansion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.expansion)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::valhalla::Expansion* temp = _impl_.expansion_;
  _impl_.expansion_ = nullptr;
  return temp;
}
inline ::valhalla::Expansion* Api::_internal_mutable_expansion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.expansion_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Expansion>(GetArena());
    _impl_.expansion_ = reinterpret_cast<::valhalla::Expansion*>(p);
  }
  return _impl_.expansion_;
}
inline ::valhalla::Expansion* Api::mutable_expansion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Expansion* _msg = _internal_mutable_expansion();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.expansion)
  return _msg;
}
inline void Api::set_allocated_expansion(::valhalla::Expansion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expansion_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.expansion_ = reinterpret_cast<::valhalla::Expansion*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.expansion)
}

// .valhalla.Info info = 20;
inline bool Api::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::valhalla::Info& Api::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::valhalla::Info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Info&>(::valhalla::_Info_default_instance_);
}
inline const ::valhalla::Info& Api::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Api.info)
  return _internal_info();
}
inline void Api::unsafe_arena_set_allocated_info(::valhalla::Info* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::valhalla::Info*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Api.info)
}
inline ::valhalla::Info* Api::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::valhalla::Info* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::valhalla::Info* Api::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:valhalla.Api.info)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::valhalla::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::valhalla::Info* Api::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Info>(GetArena());
    _impl_.info_ = reinterpret_cast<::valhalla::Info*>(p);
  }
  return _impl_.info_;
}
inline ::valhalla::Info* Api::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::valhalla::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:valhalla.Api.info)
  return _msg;
}
inline void Api::set_allocated_info(::valhalla::Info* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.info_ = reinterpret_cast<::valhalla::Info*>(value);
  // @@protoc_insertion_point(field_set_allocated:valhalla.Api.info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2eproto_2epb_2eh
