// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: isochrone.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_isochrone_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_isochrone_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_isochrone_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_isochrone_2eproto {
  static const ::uint32_t offsets[];
};
namespace valhalla {
class Isochrone;
struct IsochroneDefaultTypeInternal;
extern IsochroneDefaultTypeInternal _Isochrone_default_instance_;
class Isochrone_Contour;
struct Isochrone_ContourDefaultTypeInternal;
extern Isochrone_ContourDefaultTypeInternal _Isochrone_Contour_default_instance_;
class Isochrone_Geometry;
struct Isochrone_GeometryDefaultTypeInternal;
extern Isochrone_GeometryDefaultTypeInternal _Isochrone_Geometry_default_instance_;
class Isochrone_Interval;
struct Isochrone_IntervalDefaultTypeInternal;
extern Isochrone_IntervalDefaultTypeInternal _Isochrone_Interval_default_instance_;
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace valhalla {
enum Isochrone_metric_type : int {
  Isochrone_metric_type_time = 0,
  Isochrone_metric_type_distance = 1,
  Isochrone_metric_type_Isochrone_metric_type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Isochrone_metric_type_Isochrone_metric_type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Isochrone_metric_type_IsValid(int value);
extern const uint32_t Isochrone_metric_type_internal_data_[];
constexpr Isochrone_metric_type Isochrone_metric_type_metric_type_MIN = static_cast<Isochrone_metric_type>(0);
constexpr Isochrone_metric_type Isochrone_metric_type_metric_type_MAX = static_cast<Isochrone_metric_type>(1);
constexpr int Isochrone_metric_type_metric_type_ARRAYSIZE = 1 + 1;
const std::string& Isochrone_metric_type_Name(Isochrone_metric_type value);
template <typename T>
const std::string& Isochrone_metric_type_Name(T value) {
  static_assert(std::is_same<T, Isochrone_metric_type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to metric_type_Name().");
  return Isochrone_metric_type_Name(static_cast<Isochrone_metric_type>(value));
}
const std::string& Isochrone_metric_type_Name(Isochrone_metric_type value);
bool Isochrone_metric_type_Parse(absl::string_view name, Isochrone_metric_type* value);

// ===================================================================


// -------------------------------------------------------------------

class Isochrone_Geometry final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone.Geometry) */ {
 public:
  inline Isochrone_Geometry() : Isochrone_Geometry(nullptr) {}
  ~Isochrone_Geometry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Isochrone_Geometry(::google::protobuf::internal::ConstantInitialized);

  inline Isochrone_Geometry(const Isochrone_Geometry& from)
      : Isochrone_Geometry(nullptr, from) {}
  Isochrone_Geometry(Isochrone_Geometry&& from) noexcept
    : Isochrone_Geometry() {
    *this = ::std::move(from);
  }

  inline Isochrone_Geometry& operator=(const Isochrone_Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone_Geometry& operator=(Isochrone_Geometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Isochrone_Geometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Isochrone_Geometry* internal_default_instance() {
    return reinterpret_cast<const Isochrone_Geometry*>(
               &_Isochrone_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Isochrone_Geometry& a, Isochrone_Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone_Geometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone_Geometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Isochrone_Geometry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Isochrone_Geometry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Isochrone_Geometry& from);
  void MergeFrom(const Isochrone_Geometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Isochrone_Geometry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Isochrone.Geometry";
  }
  protected:
  explicit Isochrone_Geometry(::google::protobuf::Arena* arena);
  Isochrone_Geometry(::google::protobuf::Arena* arena, const Isochrone_Geometry& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 1,
  };
  // repeated sint32 coords = 1 [packed = true];
  int coords_size() const;
  private:
  int _internal_coords_size() const;

  public:
  void clear_coords() ;
  ::int32_t coords(int index) const;
  void set_coords(int index, ::int32_t value);
  void add_coords(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& coords() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_coords();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_coords() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_coords();

  public:
  // @@protoc_insertion_point(class_scope:valhalla.Isochrone.Geometry)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> coords_;
    mutable ::google::protobuf::internal::CachedSize _coords_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_isochrone_2eproto;
};// -------------------------------------------------------------------

class Isochrone_Contour final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone.Contour) */ {
 public:
  inline Isochrone_Contour() : Isochrone_Contour(nullptr) {}
  ~Isochrone_Contour() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Isochrone_Contour(::google::protobuf::internal::ConstantInitialized);

  inline Isochrone_Contour(const Isochrone_Contour& from)
      : Isochrone_Contour(nullptr, from) {}
  Isochrone_Contour(Isochrone_Contour&& from) noexcept
    : Isochrone_Contour() {
    *this = ::std::move(from);
  }

  inline Isochrone_Contour& operator=(const Isochrone_Contour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone_Contour& operator=(Isochrone_Contour&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Isochrone_Contour& default_instance() {
    return *internal_default_instance();
  }
  static inline const Isochrone_Contour* internal_default_instance() {
    return reinterpret_cast<const Isochrone_Contour*>(
               &_Isochrone_Contour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Isochrone_Contour& a, Isochrone_Contour& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone_Contour* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone_Contour* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Isochrone_Contour* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Isochrone_Contour>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Isochrone_Contour& from);
  void MergeFrom(const Isochrone_Contour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Isochrone_Contour* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Isochrone.Contour";
  }
  protected:
  explicit Isochrone_Contour(::google::protobuf::Arena* arena);
  Isochrone_Contour(::google::protobuf::Arena* arena, const Isochrone_Contour& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeometriesFieldNumber = 2,
  };
  // repeated .valhalla.Isochrone.Geometry geometries = 2;
  int geometries_size() const;
  private:
  int _internal_geometries_size() const;

  public:
  void clear_geometries() ;
  ::valhalla::Isochrone_Geometry* mutable_geometries(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Geometry >*
      mutable_geometries();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Geometry>& _internal_geometries() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Geometry>* _internal_mutable_geometries();
  public:
  const ::valhalla::Isochrone_Geometry& geometries(int index) const;
  ::valhalla::Isochrone_Geometry* add_geometries();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Geometry >&
      geometries() const;
  // @@protoc_insertion_point(class_scope:valhalla.Isochrone.Contour)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Geometry > geometries_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_isochrone_2eproto;
};// -------------------------------------------------------------------

class Isochrone_Interval final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone.Interval) */ {
 public:
  inline Isochrone_Interval() : Isochrone_Interval(nullptr) {}
  ~Isochrone_Interval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Isochrone_Interval(::google::protobuf::internal::ConstantInitialized);

  inline Isochrone_Interval(const Isochrone_Interval& from)
      : Isochrone_Interval(nullptr, from) {}
  Isochrone_Interval(Isochrone_Interval&& from) noexcept
    : Isochrone_Interval() {
    *this = ::std::move(from);
  }

  inline Isochrone_Interval& operator=(const Isochrone_Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone_Interval& operator=(Isochrone_Interval&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Isochrone_Interval& default_instance() {
    return *internal_default_instance();
  }
  static inline const Isochrone_Interval* internal_default_instance() {
    return reinterpret_cast<const Isochrone_Interval*>(
               &_Isochrone_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Isochrone_Interval& a, Isochrone_Interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone_Interval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone_Interval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Isochrone_Interval* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Isochrone_Interval>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Isochrone_Interval& from);
  void MergeFrom(const Isochrone_Interval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Isochrone_Interval* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Isochrone.Interval";
  }
  protected:
  explicit Isochrone_Interval(::google::protobuf::Arena* arena);
  Isochrone_Interval(::google::protobuf::Arena* arena, const Isochrone_Interval& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContoursFieldNumber = 3,
    kMetricFieldNumber = 1,
    kMetricValueFieldNumber = 2,
  };
  // repeated .valhalla.Isochrone.Contour contours = 3;
  int contours_size() const;
  private:
  int _internal_contours_size() const;

  public:
  void clear_contours() ;
  ::valhalla::Isochrone_Contour* mutable_contours(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Contour >*
      mutable_contours();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Contour>& _internal_contours() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Contour>* _internal_mutable_contours();
  public:
  const ::valhalla::Isochrone_Contour& contours(int index) const;
  ::valhalla::Isochrone_Contour* add_contours();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Contour >&
      contours() const;
  // .valhalla.Isochrone.metric_type metric = 1;
  void clear_metric() ;
  ::valhalla::Isochrone_metric_type metric() const;
  void set_metric(::valhalla::Isochrone_metric_type value);

  private:
  ::valhalla::Isochrone_metric_type _internal_metric() const;
  void _internal_set_metric(::valhalla::Isochrone_metric_type value);

  public:
  // float metric_value = 2;
  void clear_metric_value() ;
  float metric_value() const;
  void set_metric_value(float value);

  private:
  float _internal_metric_value() const;
  void _internal_set_metric_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:valhalla.Isochrone.Interval)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Contour > contours_;
    int metric_;
    float metric_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_isochrone_2eproto;
};// -------------------------------------------------------------------

class Isochrone final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone) */ {
 public:
  inline Isochrone() : Isochrone(nullptr) {}
  ~Isochrone() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Isochrone(::google::protobuf::internal::ConstantInitialized);

  inline Isochrone(const Isochrone& from)
      : Isochrone(nullptr, from) {}
  Isochrone(Isochrone&& from) noexcept
    : Isochrone() {
    *this = ::std::move(from);
  }

  inline Isochrone& operator=(const Isochrone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone& operator=(Isochrone&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Isochrone& default_instance() {
    return *internal_default_instance();
  }
  static inline const Isochrone* internal_default_instance() {
    return reinterpret_cast<const Isochrone*>(
               &_Isochrone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Isochrone& a, Isochrone& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Isochrone* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Isochrone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Isochrone& from);
  void MergeFrom(const Isochrone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Isochrone* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "valhalla.Isochrone";
  }
  protected:
  explicit Isochrone(::google::protobuf::Arena* arena);
  Isochrone(::google::protobuf::Arena* arena, const Isochrone& from);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using Geometry = Isochrone_Geometry;
  using Contour = Isochrone_Contour;
  using Interval = Isochrone_Interval;

  using metric_type = Isochrone_metric_type;
  static constexpr metric_type time = Isochrone_metric_type_time;
  static constexpr metric_type distance = Isochrone_metric_type_distance;
  static inline bool metric_type_IsValid(int value) {
    return Isochrone_metric_type_IsValid(value);
  }
  static constexpr metric_type metric_type_MIN = Isochrone_metric_type_metric_type_MIN;
  static constexpr metric_type metric_type_MAX = Isochrone_metric_type_metric_type_MAX;
  static constexpr int metric_type_ARRAYSIZE = Isochrone_metric_type_metric_type_ARRAYSIZE;
  template <typename T>
  static inline const std::string& metric_type_Name(T value) {
    return Isochrone_metric_type_Name(value);
  }
  static inline bool metric_type_Parse(absl::string_view name, metric_type* value) {
    return Isochrone_metric_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 1,
  };
  // repeated .valhalla.Isochrone.Interval intervals = 1;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;

  public:
  void clear_intervals() ;
  ::valhalla::Isochrone_Interval* mutable_intervals(int index);
  ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Interval >*
      mutable_intervals();
  private:
  const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Interval>& _internal_intervals() const;
  ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Interval>* _internal_mutable_intervals();
  public:
  const ::valhalla::Isochrone_Interval& intervals(int index) const;
  ::valhalla::Isochrone_Interval* add_intervals();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Interval >&
      intervals() const;
  // @@protoc_insertion_point(class_scope:valhalla.Isochrone)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::valhalla::Isochrone_Interval > intervals_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_isochrone_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Isochrone_Geometry

// repeated sint32 coords = 1 [packed = true];
inline int Isochrone_Geometry::_internal_coords_size() const {
  return _internal_coords().size();
}
inline int Isochrone_Geometry::coords_size() const {
  return _internal_coords_size();
}
inline void Isochrone_Geometry::clear_coords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coords_.Clear();
}
inline ::int32_t Isochrone_Geometry::coords(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Geometry.coords)
  return _internal_coords().Get(index);
}
inline void Isochrone_Geometry::set_coords(int index, ::int32_t value) {
  _internal_mutable_coords()->Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Isochrone.Geometry.coords)
}
inline void Isochrone_Geometry::add_coords(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coords()->Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.Geometry.coords)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Isochrone_Geometry::coords() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.Geometry.coords)
  return _internal_coords();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Isochrone_Geometry::mutable_coords()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.Geometry.coords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coords();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Isochrone_Geometry::_internal_coords()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coords_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Isochrone_Geometry::_internal_mutable_coords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coords_;
}

// -------------------------------------------------------------------

// Isochrone_Contour

// repeated .valhalla.Isochrone.Geometry geometries = 2;
inline int Isochrone_Contour::_internal_geometries_size() const {
  return _internal_geometries().size();
}
inline int Isochrone_Contour::geometries_size() const {
  return _internal_geometries_size();
}
inline void Isochrone_Contour::clear_geometries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.geometries_.Clear();
}
inline ::valhalla::Isochrone_Geometry* Isochrone_Contour::mutable_geometries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Isochrone.Contour.geometries)
  return _internal_mutable_geometries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Geometry>* Isochrone_Contour::mutable_geometries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.Contour.geometries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_geometries();
}
inline const ::valhalla::Isochrone_Geometry& Isochrone_Contour::geometries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Contour.geometries)
  return _internal_geometries().Get(index);
}
inline ::valhalla::Isochrone_Geometry* Isochrone_Contour::add_geometries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::Isochrone_Geometry* _add = _internal_mutable_geometries()->Add();
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.Contour.geometries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Geometry>& Isochrone_Contour::geometries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.Contour.geometries)
  return _internal_geometries();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Geometry>&
Isochrone_Contour::_internal_geometries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.geometries_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Geometry>*
Isochrone_Contour::_internal_mutable_geometries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.geometries_;
}

// -------------------------------------------------------------------

// Isochrone_Interval

// .valhalla.Isochrone.metric_type metric = 1;
inline void Isochrone_Interval::clear_metric() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metric_ = 0;
}
inline ::valhalla::Isochrone_metric_type Isochrone_Interval::metric() const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Interval.metric)
  return _internal_metric();
}
inline void Isochrone_Interval::set_metric(::valhalla::Isochrone_metric_type value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:valhalla.Isochrone.Interval.metric)
}
inline ::valhalla::Isochrone_metric_type Isochrone_Interval::_internal_metric() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::valhalla::Isochrone_metric_type>(_impl_.metric_);
}
inline void Isochrone_Interval::_internal_set_metric(::valhalla::Isochrone_metric_type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metric_ = value;
}

// float metric_value = 2;
inline void Isochrone_Interval::clear_metric_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metric_value_ = 0;
}
inline float Isochrone_Interval::metric_value() const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Interval.metric_value)
  return _internal_metric_value();
}
inline void Isochrone_Interval::set_metric_value(float value) {
  _internal_set_metric_value(value);
  // @@protoc_insertion_point(field_set:valhalla.Isochrone.Interval.metric_value)
}
inline float Isochrone_Interval::_internal_metric_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metric_value_;
}
inline void Isochrone_Interval::_internal_set_metric_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.metric_value_ = value;
}

// repeated .valhalla.Isochrone.Contour contours = 3;
inline int Isochrone_Interval::_internal_contours_size() const {
  return _internal_contours().size();
}
inline int Isochrone_Interval::contours_size() const {
  return _internal_contours_size();
}
inline void Isochrone_Interval::clear_contours() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contours_.Clear();
}
inline ::valhalla::Isochrone_Contour* Isochrone_Interval::mutable_contours(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Isochrone.Interval.contours)
  return _internal_mutable_contours()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Contour>* Isochrone_Interval::mutable_contours()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.Interval.contours)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_contours();
}
inline const ::valhalla::Isochrone_Contour& Isochrone_Interval::contours(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Interval.contours)
  return _internal_contours().Get(index);
}
inline ::valhalla::Isochrone_Contour* Isochrone_Interval::add_contours() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::Isochrone_Contour* _add = _internal_mutable_contours()->Add();
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.Interval.contours)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Contour>& Isochrone_Interval::contours() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.Interval.contours)
  return _internal_contours();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Contour>&
Isochrone_Interval::_internal_contours() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contours_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Contour>*
Isochrone_Interval::_internal_mutable_contours() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.contours_;
}

// -------------------------------------------------------------------

// Isochrone

// repeated .valhalla.Isochrone.Interval intervals = 1;
inline int Isochrone::_internal_intervals_size() const {
  return _internal_intervals().size();
}
inline int Isochrone::intervals_size() const {
  return _internal_intervals_size();
}
inline void Isochrone::clear_intervals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intervals_.Clear();
}
inline ::valhalla::Isochrone_Interval* Isochrone::mutable_intervals(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:valhalla.Isochrone.intervals)
  return _internal_mutable_intervals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Interval>* Isochrone::mutable_intervals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.intervals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_intervals();
}
inline const ::valhalla::Isochrone_Interval& Isochrone::intervals(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.intervals)
  return _internal_intervals().Get(index);
}
inline ::valhalla::Isochrone_Interval* Isochrone::add_intervals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::valhalla::Isochrone_Interval* _add = _internal_mutable_intervals()->Add();
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.intervals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Interval>& Isochrone::intervals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.intervals)
  return _internal_intervals();
}
inline const ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Interval>&
Isochrone::_internal_intervals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intervals_;
}
inline ::google::protobuf::RepeatedPtrField<::valhalla::Isochrone_Interval>*
Isochrone::_internal_mutable_intervals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.intervals_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::valhalla::Isochrone_metric_type> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_isochrone_2eproto_2epb_2eh
